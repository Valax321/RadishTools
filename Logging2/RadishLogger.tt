<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="LoggingCommon.t4" once="true" #>
using System;
using Cysharp.Text;
using UnityEngine;
using Object = UnityEngine.Object;

namespace Radish.Logging2 {

internal sealed class RadishLogger : ILogger
{
	public string Name { get; }

	internal RadishLogger(string name)
	{
		Name = name;
	}

	#region Static Write Methods

	[HideInCallstack]
	private static void Write(LogLevel level, Object context, string category, string message)
	{
		foreach (var writer in LogManager.RegisteredLoggers)
		{
			writer.Write(level, context, category, message.AsSpan());
		}
	}

	[HideInCallstack]
	private static void WriteException(LogLevel level, Object context, string category, Exception ex)
	{
		using var fmt = ZString.CreateStringBuilder();
		fmt.Append(ex);
		var span = fmt.AsSpan();
		foreach (var writer in LogManager.RegisteredLoggers)
		{
			writer.Write(level, context, category, span);
		}
	}

	[HideInCallstack]
	private static void WriteException(LogLevel level, Object context, string category, Exception ex, string message)
	{
		using var fmt = ZString.CreateStringBuilder();
		fmt.Append(message);
		fmt.Append(' ');
		fmt.Append(ex);
		var span = fmt.AsSpan();
		foreach (var writer in LogManager.RegisteredLoggers)
		{
			writer.Write(level, context, category, span);
		}
	}

<# for(var i = 1; i <= TypeParamMax; i++) { #>
	[HideInCallstack]
	private static void Write<<#= CreateTypeArgument(i) #>>(LogLevel level, Object context, string category, string format, <#= CreateParameters(i) #>)
	{
		using var fmt = ZString.CreateStringBuilder();
		fmt.AppendFormat(format, <#= CreateParameterNames(i) #>);
		var span = fmt.AsSpan();
		foreach (var writer in LogManager.RegisteredLoggers)
		{
			writer.Write(level, context, category, span);
		}
	}

	[HideInCallstack]
	private static void WriteException<<#= CreateTypeArgument(i) #>>(LogLevel level, Object context, string category, Exception ex, string format, <#= CreateParameters(i) #>)
	{
		using var fmt = ZString.CreateStringBuilder();
		fmt.AppendFormat(format, <#= CreateParameterNames(i) #>);
		fmt.Append(' ');
		fmt.Append(ex);
		var span = fmt.AsSpan();
		foreach (var writer in LogManager.RegisteredLoggers)
		{
			writer.Write(level, context, category, span);
		}
	}

<# } #>
	#endregion

	#region Info (Interface)

	[HideInCallstack]
	public void Info(string message)
		=> Write(LogLevel.Info, null, Name, message);

	[HideInCallstack]
	public void Info(Object context, string message)
		=> Write(LogLevel.Info, context, Name, message);

<# for(var i = 1; i <= TypeParamMax; i++) { #>
	[HideInCallstack]
	public void Info<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Info, null, Name, format, <#= CreateParameterNames(i) #>);

	[HideInCallstack]
	public void Info<<#= CreateTypeArgument(i) #>>(Object context, string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Info, context, Name, format, <#= CreateParameterNames(i) #>);

<# } #>
	#endregion

	#region Warning (Interface)

	[HideInCallstack]
	public void Warn(string message)
		=> Write(LogLevel.Warning, null, Name, message);

	[HideInCallstack]
	public void Warn(Object context, string message)
		=> Write(LogLevel.Warning, null, Name, message);

<# for(var i = 1; i <= TypeParamMax; i++) { #>
	[HideInCallstack]
	public void Warn<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Warning, null, Name, format, <#= CreateParameterNames(i) #>);

	[HideInCallstack]
	public void Warn<<#= CreateTypeArgument(i) #>>(Object context, string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Warning, context, Name, format, <#= CreateParameterNames(i) #>);

<# } #>
	#endregion

	#region Error (Interface)

	[HideInCallstack]
	public void Error(string message)
		=> Write(LogLevel.Error, null, Name, message);

	[HideInCallstack]
	public void Error(Object context, string message)
		=> Write(LogLevel.Error, context, Name, message);

<# for(var i = 1; i <= TypeParamMax; i++) { #>
	[HideInCallstack]
	public void Error<<#= CreateTypeArgument(i) #>>(string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Error, null, Name, format, <#= CreateParameterNames(i) #>);

	[HideInCallstack]
	public void Error<<#= CreateTypeArgument(i) #>>(Object context, string format, <#= CreateParameters(i) #>) 
		=> Write(LogLevel.Error, context, Name, format, <#= CreateParameterNames(i) #>);

<# } #>
	#endregion

	#region Warning (Exception)

	[HideInCallstack]
	public void Exception(Exception ex)
		=> WriteException(LogLevel.Exception, null, Name, ex);

	[HideInCallstack]
	public void Exception(Object context, Exception ex)
		=> WriteException(LogLevel.Exception, context, Name, ex);

	[HideInCallstack]
	public void Exception(Exception ex, string message)
		=> WriteException(LogLevel.Exception, null, Name, ex, message);

	[HideInCallstack]
	public void Exception(Object context, Exception ex, string message)
		=> WriteException(LogLevel.Exception, context, Name, ex, message);

<# for(var i = 1; i <= TypeParamMax; i++) { #>
	[HideInCallstack]
	public void Exception<<#= CreateTypeArgument(i) #>>(Exception ex, string format, <#= CreateParameters(i) #>) 
		=> WriteException(LogLevel.Exception, null, Name, ex, format, <#= CreateParameterNames(i) #>);

	[HideInCallstack]
	public void Exception<<#= CreateTypeArgument(i) #>>(Object context, Exception ex, string format, <#= CreateParameters(i) #>) 
		=> WriteException(LogLevel.Exception, context, Name, ex, format, <#= CreateParameterNames(i) #>);

<# } #>
	#endregion
}
}