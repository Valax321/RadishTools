<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFormat</name>
    </assembly>
    <members>
        <member name="T:SmartFormat.Core.Extensions.IFormattingExtensionsToggle">
            <summary>
            Represents a toggle for enabling or disabling <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions.
            This interface is primarily used by <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions
            that receive it as part of the <see cref="T:SmartFormat.Core.Extensions.ISelectorInfo"/> parameter.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingExtensionsToggle.DisableFormattingExtensions">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions are enabled.
            The value should be <see langword="false"/> (default), unless the <see cref="T:SmartFormat.Core.Extensions.ISource"/> extension
            found a value in <seealso cref="M:SmartFormat.Core.Extensions.ISource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)"/> where default formatting cannot reasonably be done.
            <br/>
            In this case the <see cref="T:SmartFormat.Core.Extensions.ISource"/> may directly write some output using <see cref="M:SmartFormat.Core.Extensions.IFormattingInfo.Write(System.ReadOnlySpan{System.Char})"/>,
            or produce no output at all.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Extensions.ISource">
            <summary>
            Evaluates a selector.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.ISource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <summary>
            Evaluates the <see cref="T:SmartFormat.Core.Parsing.Selector" /> based on the <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.CurrentValue" />.
            </summary>
            <param name="selectorInfo">The information about the selector being evaluated.<br/>
            Note: This can be casted to <seealso cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>, which also implements <seealso cref="T:SmartFormat.Core.Extensions.IFormattingExtensionsToggle"/>.</param>
            <returns>If the <see cref="T:SmartFormat.Core.Parsing.Selector"/> could be evaluated,
            the <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.Result" /> will be set and <see langword="true"/> will be returned.
            </returns>
        </member>
        <member name="T:SmartFormat.Core.Extensions.Registry">
            <summary>
            The <see cref="T:SmartFormat.Core.Extensions.Registry"/> is managing the <see cref="T:SmartFormat.Core.Extensions.ISource"/> and <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.#ctor(SmartFormat.SmartFormatter)">
            <summary>
            Creates a new instance of the <see cref="T:SmartFormat.Core.Extensions.Registry"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.Registry.SourceExtensions">
            <summary>
            Gets the list of <see cref="T:SmartFormat.Core.Extensions.ISource" /> source extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.GetSourceExtensions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:SmartFormat.Core.Extensions.ISource" /> source extensions.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.Registry.FormatterExtensions">
            <summary>
            Gets the list of <see cref="T:SmartFormat.Core.Extensions.IFormatter" /> formatter extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.GetFormatterExtensions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:SmartFormat.Core.Extensions.IFormatter" /> formatter extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.AddExtensions(SmartFormat.Core.Extensions.ISource[])">
            <summary>
            Adds <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions to the <see cref="M:SmartFormat.Core.Extensions.Registry.GetSourceExtensions"/> list,
            if the <see cref="T:System.Type"/> has not been added before. <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Sources"/> are inserted
            at the recommended position, all others are added at the end of the list.
            <para>
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </para>
            <para>
            Extensions implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> <b>and</b> <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>
            will be auto-registered for both.
            </para>
            </summary>
            <param name="sourceExtensions"><see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions in an arbitrary order.</param>
            <returns>This <see cref="T:SmartFormat.Core.Extensions.Registry"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.AddExtensions(SmartFormat.Core.Extensions.IFormatter[])">
            <summary>
            Adds <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions to the <see cref="M:SmartFormat.Core.Extensions.Registry.GetFormatterExtensions"/> list,
            if the <see cref="T:System.Type"/> has not been added before. <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Formatters"/> are inserted
            at the recommended position, all others are added at the end of the list.
            <para>
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </para>
            <para>
            Extensions implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> <b>and</b> <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>
            will be auto-registered for both.
            </para>
            </summary>
            <param name="formatterExtensions"><see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions in an arbitrary order.</param>
            <returns>This <see cref="T:SmartFormat.Core.Extensions.Registry"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.InsertExtension(System.Int32,SmartFormat.Core.Extensions.ISource)">
            <summary>
            Adds the <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions at the <paramref name="position"/> of the <see cref="M:SmartFormat.Core.Extensions.Registry.GetSourceExtensions"/> list,
            if the <see cref="T:System.Type"/> has not been added before.
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </summary>
            <param name="position">The position in the <see cref="P:SmartFormat.Core.Extensions.Registry.SourceExtensions"/> list where new extensions will be added.</param>
            <param name="sourceExtension"></param>
            <returns>This <see cref="T:SmartFormat.Core.Extensions.Registry"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                   <paramref name="position" /> is less than 0.
                    -or-
                    <paramref name="position" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
            </exception>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.InsertExtension(System.Int32,SmartFormat.Core.Extensions.IFormatter)">
            <summary>
            Adds the <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions at the <paramref name="position"/> of the <see cref="M:SmartFormat.Core.Extensions.Registry.GetSourceExtensions"/> list,
            if the <see cref="T:System.Type"/> has not been added before.
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </summary>
            <param name="position">The position in the <see cref="P:SmartFormat.Core.Extensions.Registry.SourceExtensions"/> list where new extensions will be added.</param>
            <param name="formatterExtension"></param>
            <returns>This <see cref="T:SmartFormat.Core.Extensions.Registry"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                   <paramref name="position" /> is less than 0.
                    -or-
                   <paramref name="position" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
            </exception>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.GetSourceExtension``1">
            <summary>
            Searches for a Source Extension of the given type, and returns it.
            Returns <see langword="null"/> if the type cannot be found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The class implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> if found, else <see langword="null"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.GetFormatterExtension``1">
            <summary>
            Searches for a Formatter Extension of the given type, and returns it.
            Returns <see langword="null"/> if the type cannot be found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The class implementing <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> if found, else <see langword="null"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.RemoveSourceExtension``1">
            <summary>
            Removes Source Extension of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><see langword="true"/>, if the extension was found and could be removed.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.RemoveFormatterExtension``1">
            <summary>
            Removes the Formatter Extension of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><see langword="true"/>, if the extension was found and could be removed.</returns>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.ThrowIfNoExtensions">
            <summary>
            Checks whether the <see cref="T:SmartFormat.Core.Extensions.Registry"/> has at least one <see cref="T:SmartFormat.Core.Extensions.ISource"/> and one <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.InvokeSourceExtensions(SmartFormat.Core.Extensions.ISelectorInfo)">
            <summary>
            Try to get a suitable <see cref="T:SmartFormat.Core.Extensions.ISource"/> extension.
            </summary>
            <param name="selectorInfo"></param>
            <exception cref="T:SmartFormat.Core.Formatting.FormattingException"></exception>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Registry.InvokeFormatterExtensions(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            First check whether the named formatter name exist in of the <see cref="P:SmartFormat.Core.Extensions.Registry.FormatterExtensions" />,
            next check whether the named formatter is able to process the format.
            </summary>
            <param name="formattingInfo"></param>
            <returns><see langword="true"/>, if a <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions was found.</returns>
        </member>
        <member name="P:SmartFormat.Core.Extensions.Registry.Settings">
            <summary>
            Gets the <see cref="T:SmartFormat.Core.Settings.SmartSettings" /> for Smart.Format
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Extensions.Source">
            <summary>
            The base class for <see cref="T:SmartFormat.Core.Extensions.ISource"/> extension classes.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Extensions.Source._formatter">
            <summary>
            The instance of the current <see cref="T:SmartFormat.SmartFormatter"/>.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Extensions.Source._smartSettings">
            <summary>
            The instance of the current <see cref="T:SmartFormat.Core.Settings.SmartSettings"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Source.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Core.Extensions.Source.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Core.Extensions.Source.HasNullableOperator(SmartFormat.Core.Extensions.ISelectorInfo)">
            <summary>
            Checks if any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has nullable <c>?</c> as their first operator.
            </summary>
            <param name="selectorInfo"></param>
            <returns>
            <see langword="true"/>, any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has nullable <c>?</c> as their first operator.
            </returns>
            <remarks>
            The nullable operator '?' can be followed by a dot (like '?.') or a square brace (like '.[')
            </remarks>
        </member>
        <member name="M:SmartFormat.Core.Extensions.Source.TrySetResultForNullableOperator(SmartFormat.Core.Extensions.ISelectorInfo)">
            <summary>
            If any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has
            nullable <c>?</c> as their first operator, and <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.CurrentValue"/>
            is <see langword="null"/>, <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.Result"/> will be set to <see langword="null"/>.
            </summary>
            <param name="selectorInfo"></param>
            <returns>
            <see langword="true"/>, if any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s
            <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has  nullable <c>?</c> as their first
            operator, and <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.CurrentValue"/> is <see langword="null"/>.
            </returns>
            <remarks>
            The nullable operator '?' can be followed by a dot (like '?.') or a square brace (like '.[')
            </remarks>
        </member>
        <member name="T:SmartFormat.Core.Extensions.IFormatter">
            <summary> Converts an object to a string. </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormatter.Name">
            <summary>
            An extension can be explicitly called by using its name.
            For example, "{0:list:N2}" will explicitly call the "list" extension.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormatter.CanAutoDetect">
            <summary>
            Any extensions marked as <see cref="P:SmartFormat.Core.Extensions.IFormatter.CanAutoDetect"/> will be called implicitly
            (when no formatter name is specified in the input format string).
            For example, "{0:N2}" will implicitly call extensions marked as <see cref="P:SmartFormat.Core.Extensions.IFormatter.CanAutoDetect"/>.
            Implicit formatter invocations should not throw exceptions.
            With <see cref="P:SmartFormat.Core.Extensions.IFormatter.CanAutoDetect"/> == <see langword="false"/>, the formatter can only be
            called by its name in the input format string.
            </summary>
            <remarks>
            If more than one registered <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> can auto-detect, the first one in the formatter list will win.
            </remarks>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes the current value to the output, using the specified format.
            IF this extension cannot write the value, returns false, otherwise true.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Extensions.IFormattingInfo">
            <summary>
            Contains all necessary info for formatting a value
            </summary>
            <example>
            In "{Items.Length:choose(1,2,3):one|two|three}",
            the <see cref="P:SmartFormat.Core.Extensions.IFormattingInfo.CurrentValue" /> would be the value of "Items.Length",
            the <see cref="P:SmartFormat.Core.Extensions.IFormattingInfo.FormatterOptions" /> would be "1,2,3",
            and the <see cref="P:SmartFormat.Core.Extensions.IFormattingInfo.Format" /> would be "one|two|three".
            </example>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.CurrentValue">
            <summary>
            The current value that is to be formatted.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.Format">
            <summary>
            This format specifies how to output the <see cref="P:SmartFormat.Core.Extensions.IFormattingInfo.CurrentValue" />.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.Placeholder">
            <summary>
            Contains all the details about the current placeholder.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.Alignment">
            <summary>
            Alignment inserts spaces into the output to ensure consistent length.
            Positive numbers insert spaces to the left, to right-align the text.
            Negative numbers insert spaces to the right, to left-align the text.
            This should only work with the Default Formatter, but is optional with custom formatters.
            This is primarily for compatibility with String.Format.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.FormatterOptions">
            <summary>
            When a named formatter is used, this will hold the options.
            For example, in "{0:choose(1,2,3):one|two|three}", FormatterOptions is "1,2,3".
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.IFormattingInfo.FormatDetails">
            <summary>
            Infrequently used details, often used for debugging
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IFormattingInfo.Write(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> to the output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IFormattingInfo.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a <see cref="T:System.ReadOnlySpan`1"/> text to the output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IFormattingInfo.FormatAsChild(SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Creates a child <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> from the current <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> instance
            and invokes formatting with <see cref="T:SmartFormat.SmartFormatter"/> with the child as parameter.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IFormattingInfo.FormattingException(System.String,SmartFormat.Core.Parsing.FormatItem,System.Int32)">
            <summary>
            Creates a <see cref="M:SmartFormat.Core.Extensions.IFormattingInfo.FormattingException(System.String,SmartFormat.Core.Parsing.FormatItem,System.Int32)" /> associated with the <see cref="P:SmartFormat.Core.Extensions.IFormattingInfo.Format" />.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Extensions.IInitializer">
            <summary>
            Initializes an <see cref="T:SmartFormat.Core.Extensions.ISource"/> or <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)">
            <summary>
            Initializes an <see cref="T:SmartFormat.Core.Extensions.ISource"/> or <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>.
            The method gets called when adding an extension to a <see cref="T:SmartFormat.SmartFormatter"/> instance.
            </summary>
            <param name="smartFormatter"></param>
        </member>
        <member name="T:SmartFormat.Core.Extensions.ISelectorInfo">
            <summary>
            Contains all the necessary information for evaluating a selector.
            </summary>
            <example>
            When evaluating "{Items.Length}",
            the CurrentValue might be Items, and the Selector would be "Length".
            The job of an ISource is to set CurrentValue to Items.Length.
            </example>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.CurrentValue">
            <summary>
            The current value to evaluate.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.SelectorText">
            <summary>
            The selector to evaluate
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.SelectorIndex">
            <summary>
            The index of the selector in a multipart selector.
            Example: {Person.Birthday.Year} has 3 selectors,
            and Year has a SelectorIndex of 2.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.SelectorOperator">
            <summary>
            The operator that came before the selector; typically "."
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.Result">
            <summary>
            Gets or sets the result of evaluating the selector.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.Placeholder">
            <summary>
            Contains all the details about the current placeholder.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Extensions.ISelectorInfo.FormatDetails">
            <summary>
            Details about the current format, such as the <see cref="T:SmartFormat.Core.Output.IOutput"/> container.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Formatting.FormatDetails">
            <summary>
            Contains extra information about the item currently being formatted,
            such as the <see cref="T:SmartFormat.Core.Output.IOutput"/> container.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormatDetails.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormatDetails.Initialize(SmartFormat.SmartFormatter,SmartFormat.Core.Parsing.Format,System.Collections.Generic.IList{System.Object},System.IFormatProvider,SmartFormat.Core.Output.IOutput)">
            <summary>
            Initializes the <see cref="T:SmartFormat.Core.Formatting.FormatDetails"/> instance.
            </summary>
            <param name="formatter"></param>
            <param name="originalFormat"></param>
            <param name="originalArgs"></param>
            <param name="provider"></param>
            <param name="output"></param>
            <returns>This <see cref="T:SmartFormat.Core.Formatting.FormatDetails"/> instance.</returns>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.Formatter">
            <summary>
            The original formatter responsible for formatting this item.
            It can be used for evaluating nested formats.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.OriginalFormat">
            <summary>
            Gets the <see cref="T:SmartFormat.Core.Parsing.Format"/> returned by the <see cref="T:SmartFormat.Core.Parsing.Parser"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.OriginalArgs">
            <summary>
            The original set of arguments passed to the format method.
            These provide global-access to the original arguments.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.Provider">
            <summary>
            The <see cref="T:System.IFormatProvider"/> that can be used to determine how to
            format items such as numbers, dates, and anything else that
            might be culture-specific.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.Output">
            <summary>
            Gets the <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.FormattingException">
            <summary>
            If ErrorAction is set to OutputErrorsInResult, this will
            contain the exception that caused the formatting error.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormatDetails.Settings">
            <summary>
            Contains case-sensitivity and other settings.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormatDetails.Clear">
            <summary>
            Clears all internal objects.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Formatting.FormattingException">
            <summary>
            An exception caused while attempting to output the format.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingException.#ctor(SmartFormat.Core.Parsing.FormatItem,System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Formatting.FormattingException"/>.
            </summary>
            <param name="errorItem">The <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the <see cref="T:System.Exception"/>.</param>
            <param name="formatException">The <see cref="T:System.Exception"/> that was caused by the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>.</param>
            <param name="index">The index inside the format string, where the error occurred.</param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingException.#ctor(SmartFormat.Core.Parsing.FormatItem,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Formatting.FormattingException"/>.
            </summary>
            <param name="errorItem">The <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the <see cref="T:System.Exception"/>.</param>
            <param name="issue">The description of the error.</param>
            <param name="index">The index inside the format string, where the error occurred.</param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingException.Format">
            <summary>
            Get the base format string of the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> causing the <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingException.ErrorItem">
            <summary>
            Get the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingException.Issue">
            <summary>
            Gets the description of the error.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingException.Index">
            <summary>
            The index inside the format string, where the error occurred.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingException.Message">
            <summary>
            Gets the error message, indicating the position within the format string, where the error occurred.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Formatting.FormattingInfo">
            <summary>
            The class contains the fields and methods which are necessary for formatting.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.Initialize(SmartFormat.Core.Formatting.FormatDetails,SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Creates a new class instance, that contains fields and methods which are necessary for formatting.
            </summary>
            <param name="formatDetails"></param>
            <param name="format"></param>
            <param name="currentValue"></param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.Initialize(SmartFormat.Core.Formatting.FormattingInfo,SmartFormat.Core.Formatting.FormatDetails,SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Creates a new class instance, that contains fields and methods which are necessary for formatting.
            </summary>
            <param name="parent"></param>
            <param name="formatDetails"></param>
            <param name="format"></param>
            <param name="currentValue"></param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.Initialize(SmartFormat.Core.Formatting.FormattingInfo,SmartFormat.Core.Formatting.FormatDetails,SmartFormat.Core.Parsing.Placeholder,System.Object)">
            <summary>
            Creates a new class instance, that contains fields and methods which are necessary for formatting.
            </summary>
            <param name="parent"></param>
            <param name="formatDetails"></param>
            <param name="placeholder"></param>
            <param name="currentValue"></param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.ReturnToPool">
            <summary>
            Returns this instance and its <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> children to the object pool.
            This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.FormattingInfoPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Parent">
            <summary>
            Gets the parent <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Selector">
            <summary>
            Gets or sets the <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.FormatDetails">
            <summary>
            Gets the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.FormatDetails"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.CurrentValue">
            <summary>
            Gets or sets the current value that is going to be formatted.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder">
            <summary>
            Gets the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Alignment">
            <summary>
            Gets the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Alignment"/> of the current <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/>,
            or - if this is <see langword="null"/> - the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Alignment"/>
            of any parent <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> that is not zero.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.FormatterOptions">
            <summary>
            Gets the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.FormatterOptions"/> of a <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Format">
            <summary>
            Gets the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Children">
            <summary>
            Gets the list of child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>s created by this instance.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.Write(System.String)">
            <summary>
            Writes the <see cref="T:System.String"/> parameter to the <see cref="T:SmartFormat.Core.Output.IOutput"/>
            and takes care of alignment.
            </summary>
            <param name="text">The string to write to the <see cref="T:SmartFormat.Core.Output.IOutput"/></param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the <see cref="T:System.ReadOnlySpan`1"/> text parameter to the <see cref="T:SmartFormat.Core.Output.IOutput"/>
            and takes care of alignment.
            </summary>
            <param name="text">The string to write to the <see cref="T:SmartFormat.Core.Output.IOutput"/></param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.FormatAsChild(SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Creates a child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> from the current <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> instance
            and invokes the <see cref="T:SmartFormat.Evaluator"/> to evaluate the <paramref name="format"/> items with the <paramref name="value"/>.
            </summary>
            <param name="format">The <see cref="T:SmartFormat.Core.Parsing.Format"/> to use.</param>
            <param name="value">The value to use for evaluation.</param>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.FormatAsSpan(System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Uses the <paramref name="current"/> value to format the <paramref name="format"/>
            and returns the result as a <see cref="T:SmartFormat.ZString.ZCharArray"/>.
            <para/>
            The <see cref="T:SmartFormat.ZString.ZCharArray"/> <b>must be disposed after use</b>.
            This method aims to be used by <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> implementations.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider"/>, or null for using the default.</param>
            <param name="format">The format that will be formatted.</param>
            <param name="current">The data object used for formatting.</param>
            <returns>A <see cref="T:SmartFormat.ZString.ZCharArray"/> with the formatting result. The <see cref="T:SmartFormat.ZString.ZCharArray"/> <b>must be disposed after use</b>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.FormatAsSpan(System.IFormatProvider,SmartFormat.Core.Parsing.Placeholder,System.Object)">
            <summary>
            Uses the <paramref name="current"/> value to format the <paramref name="placeholder"/>
            and returns the result as a <see cref="T:SmartFormat.ZString.ZCharArray"/>.
            <para/>
            The <see cref="T:SmartFormat.ZString.ZCharArray"/> <b>must be disposed after use</b>.
            This method aims to be used by <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> implementations.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider"/>, or null for using the default.</param>
            <param name="placeholder">The placeholder that will be formatted.</param>
            <param name="current">The data object used for formatting.</param>
            <returns>A <see cref="T:SmartFormat.ZString.ZCharArray"/> with the formatting result. The <see cref="T:SmartFormat.ZString.ZCharArray"/> <b>must be disposed after use</b>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.TryGetValue(SmartFormat.Core.Parsing.Placeholder,System.Object@)">
            <summary>
            Tries to get the value for the given <paramref name="placeholder"/> from the registered <see cref="T:SmartFormat.Core.Extensions.ISource"/>s.
            </summary>
            <param name="placeholder"></param>
            <param name="result"></param>
            <returns><see langword="true"/>, if one of the <see cref="T:SmartFormat.Core.Extensions.ISource"/> returned a value.</returns>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.FormattingException(System.String,SmartFormat.Core.Parsing.FormatItem,System.Int32)">
            <summary>
            Creates a new <see cref="M:SmartFormat.Core.Formatting.FormattingInfo.FormattingException(System.String,SmartFormat.Core.Parsing.FormatItem,System.Int32)"/>.
            </summary>
            <param name="issue">The text which goes to the <see cref="P:System.Exception.Message"/>.</param>
            <param name="problemItem">The <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the problem.</param>
            <param name="startIndex">The start index in the input format string.</param>
            <returns></returns>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.SelectorText">
            <summary>
            Gets the (raw) text of the <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.SelectorIndex">
            <summary>
            Gets index of the <see cref="T:SmartFormat.Core.Parsing.Selector"/> in the selector list.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.SelectorOperator">
            <summary>
            Gets the operator string of the <see cref="T:SmartFormat.Core.Parsing.Selector"/> (e.g.: comma, dot).
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.Result">
            <summary>
            <see cref="T:SmartFormat.Core.Extensions.ISource"/>s store the result of their assignment in the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Result"/> property.
            In order to be used during formatting, the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Result"/> must transition
            to the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.CurrentValue"/> of the <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Formatting.FormattingInfo.DisableFormattingExtensions">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.CreateChild(SmartFormat.Core.Parsing.Format,System.Object)">
            <summary>
            Creates a child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> from the current <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> instance for a <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="format">The <see cref="T:SmartFormat.Core.Parsing.Format"/> used for creating a child <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/>.</param>
            <param name="currentValue">The value to use for the child.</param>
            <returns>The child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.CreateChild(SmartFormat.Core.Parsing.Placeholder)">
            <summary>
            Creates a child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> from the current <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/> instance for a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
            <param name="placeholder">The <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> used for creating a child <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/>.</param>
            <returns>The child <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Formatting.FormattingInfo.ExecuteFormattingAction(System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Object,SmartFormat.Core.Output.IOutput,System.Action{SmartFormat.Core.Formatting.FormattingInfo})">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>
            and performs the <see paramref="doWork"/> action
            using the <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider"/>, or null for using the default.</param>
            <param name="formatParsed">The format that will be formatted.</param>
            <param name="current">The data object used for formatting.</param>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> to use, or null for using a <b>new instance</b> of the default <seealso cref="T:SmartFormat.Core.Output.ZStringOutput"/>.</param>
            <param name="doWork">The <see cref="T:System.Action`1"/>to invoke.</param>
            <remarks>
            The method uses object pooling to reduce GC pressure,
            and assures that objects are returned to the pool after
            <see paramref="doWork"/> is done (or an exception is thrown).
            </remarks>
        </member>
        <member name="T:SmartFormat.Core.Output.IOutput">
            <summary>
            Writes a string to the output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.IOutput.Write(System.String,SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes a string to the output.
            </summary>
            <param name="text"></param>
            <param name="formattingInfo"></param>
        </member>
        <member name="M:SmartFormat.Core.Output.IOutput.Write(System.ReadOnlySpan{System.Char},SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes a <see cref="T:System.ReadOnlySpan`1"/> text to the output.
            </summary>
            <param name="text"></param>
            <param name="formattingInfo"></param>
        </member>
        <member name="M:SmartFormat.Core.Output.IOutput.Write(SmartFormat.ZString.ZStringBuilder,SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes text of a <see cref="T:SmartFormat.ZString.ZStringBuilder"/> to the output.
            </summary>
            <param name="stringBuilder"></param>
            <param name="formattingInfo"></param>
        </member>
        <member name="T:SmartFormat.Core.Output.NullOutput">
            <summary>
            Noop implementation of <see cref="T:SmartFormat.Core.Output.IOutput"/>
            </summary>
            <remarks>
            Useful for performance tests excluding the result string generation.
            </remarks>
        </member>
        <member name="M:SmartFormat.Core.Output.NullOutput.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.NullOutput"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.NullOutput.Write(System.String,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.NullOutput.Write(System.ReadOnlySpan{System.Char},SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.NullOutput.Write(SmartFormat.ZString.ZStringBuilder,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.NullOutput.ToString">
            <summary>
            Always return <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Output.StringOutput">
            <summary>
            Wraps a <see cref="T:System.Text.StringBuilder"/> so it can be used for output.
            </summary>
            <remarks>
            <see cref="T:System.Text.StringBuilder"/>, <see cref="T:System.Text.UnicodeEncoding"/>
            and <see langword="string"/> objects use <b>UTF-16</b> encoding to store characters.
            </remarks>
        </member>
        <member name="P:SmartFormat.Core.Output.StringOutput.Output">
            <summary>
            Returns the <see cref="T:System.Text.StringBuilder"/> used for output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.StringOutput"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.StringOutput"/> with the given capacity.
            </summary>
            <param name="capacity">The estimated capacity for the result string. Essential for performance and GC pressure.</param>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.#ctor(System.Text.StringBuilder)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.StringOutput"/> using the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.Write(System.String,SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes text to the <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="text"></param>
            <param name="formattingInfo">This parameter from <see cref="T:SmartFormat.Core.Output.IOutput"/> will not be used here.</param>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.Write(System.ReadOnlySpan{System.Char},SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes text to the <see cref="T:System.Text.StringBuilder"/> object.
            </summary>
            <param name="text">The text to write.</param>
            <param name="formattingInfo">This parameter from <see cref="T:SmartFormat.Core.Output.IOutput"/> will not be used here.</param>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.Write(SmartFormat.ZString.ZStringBuilder,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.Clear">
            <summary>
            Clears the <see cref="T:System.Text.StringBuilder"/> used to create the output.
             <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.StringOutputPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.StringOutput.ToString">
            <summary>
            Returns the results of the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Output.TextWriterOutput">
            <summary>
            Wraps a <see cref="T:System.IO.TextWriter"/> so that it can be used for output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.TextWriterOutput.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.TextWriterOutput"/>.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> to use for output.</param>
        </member>
        <member name="P:SmartFormat.Core.Output.TextWriterOutput.Output">
            <summary>
            Returns the <see cref="T:System.IO.TextWriter"/> used for output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.TextWriterOutput.Write(System.String,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.TextWriterOutput.Write(System.ReadOnlySpan{System.Char},SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.TextWriterOutput.Write(SmartFormat.ZString.ZStringBuilder,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Core.Output.ZStringOutput">
            <summary>
            Wraps <see cref="T:SmartFormat.ZString.ZStringBuilder"/> so that it can be used for output.
            <see cref="T:SmartFormat.Core.Output.ZStringOutput"/> is used for the default output.
            </summary>
            <remarks>
            <para>
            Note: <see cref="T:SmartFormat.Core.Output.ZStringOutput"/> cannot be used for object pooling,
            because it contains a <see langword="struct"/> and a stack only returns a copy of the <see langword="struct"/>.
            </para>
            <see cref="T:System.Text.StringBuilder"/>, <see cref="T:SmartFormat.ZString.ZStringBuilder"/>,
            <see cref="T:System.Text.UnicodeEncoding"/> and <see langword="string"/> objects also use <b>UTF-16</b> encoding to store characters.
            </remarks>
        </member>
        <member name="P:SmartFormat.Core.Output.ZStringOutput.Output">
            <summary>
            Returns the <see cref="T:SmartFormat.ZString.ZStringBuilder"/> used for output.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.#ctor">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.ZStringOutput"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.ZStringOutput"/> with the given initial capacity.
            </summary>
            <param name="capacity">The estimated capacity required. This will reduce or avoid incremental buffer increases.</param>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.#ctor(SmartFormat.ZString.ZStringBuilder)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Output.ZStringOutput"/> using the given <see cref="T:SmartFormat.ZString.ZStringBuilder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Write(System.String,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Write(System.ReadOnlySpan{System.Char},SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Write(SmartFormat.ZString.ZStringBuilder,SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Clear">
            <summary>
            Clears the <see cref="T:System.Text.StringBuilder"/> used to create the output.
             <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.StringOutputPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.ToString">
            <summary>
            Returns the string result of the <see cref="T:SmartFormat.ZString.ZStringBuilder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Dispose(System.Boolean)">
            <summary>
            Disposes resources of <see cref="T:SmartFormat.Core.Output.ZStringOutput"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SmartFormat.Core.Output.ZStringOutput.Dispose">
            <summary>
            Disposes resources of <see cref="T:SmartFormat.Core.Output.ZStringOutput"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.EscapedLiteral">
            <summary>
            Handles escaped literals, like \\ or \n
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.EscapedLiteral.TryGetChar(System.Char,System.Char@,System.Boolean)">
            <summary>
            Tries to get the <see cref="T:System.Char"/> that corresponds to an escaped input <see cref="T:System.Char"/>.
            </summary>
            <param name="input">The input character.</param>
            <param name="result">The matching character.</param>
            <param name="includeFormatterOptionChars">If <see langword="true"/>, (){}: will be escaped, else not.</param>
            <returns><see langword="true"/>, if a matching character was found.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.EscapedLiteral.UnEscapeCharLiterals(System.Char,System.ReadOnlySpan{System.Char},System.Boolean,System.Span{System.Char})">
            <summary>
            Converts escaped characters in input with real characters, e.g. "\\" => "\", if '\' is the escape character.
            </summary>
            <param name="escapingSequenceStart"></param>
            <param name="input"></param>
            <param name="includeFormatterOptionChars">If <see langword="true"/>, (){}: will be escaped, else not.</param>
            <param name="resultBuffer">The buffer to fill. It's enough to have a buffer with the same size as the input length.</param>
            <returns>The input having escaped characters replaced with their real value.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.EscapedLiteral.EscapeCharLiterals(System.Char,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Escapes a string, that contains character which must be escaped.
            </summary>
            <param name="escapeSequenceStart">The character starting the escape sequence.</param>
            <param name="input">The string to escape.</param>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="includeFormatterOptionChars"><see langword="true"/>, if characters for formatter options should be included. Default is <see langword="false"/>.</param>
            <returns>Returns the escaped characters.</returns>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Format">
            <summary>
            Represents a parsed format string.
            Contains a list of <see cref="T:SmartFormat.Core.Parsing.FormatItem" />s,
            including <see cref="T:SmartFormat.Core.Parsing.LiteralText" />s and <see cref="T:SmartFormat.Core.Parsing.Placeholder" />s.
            <para>Note: <see cref="T:SmartFormat.Core.Parsing.Format"/> is <see cref="T:System.IDisposable"/>.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Initialize(SmartFormat.Core.Settings.SmartSettings,System.String)">
            <summary>
            Initializes the <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.
            </summary>
            <param name="smartSettings"></param>
            <param name="baseString"></param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Initialize(SmartFormat.Core.Settings.SmartSettings,SmartFormat.Core.Parsing.Placeholder,System.Int32)">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="smartSettings"></param>
            <param name="parent">The parent <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.</param>
            <param name="startIndex">The start index within the format base string.</param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Initialize(SmartFormat.Core.Settings.SmartSettings,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="smartSettings"></param>
            <param name="baseString">The base format string-</param>
            <param name="startIndex">The start index within the format base string.</param>
            <param name="endIndex">The end index within the format base string.</param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Initialize(SmartFormat.Core.Settings.SmartSettings,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="smartSettings"></param>
            <param name="baseString">The base format string-</param>
            <param name="startIndex">The start index within the format base string.</param>
            <param name="endIndex">The end index within the format base string.</param>
            <param name="hasNested"><see langword="true"/> if the format at least one nested <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.</param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.ReturnToPool">
            <summary>
            Return items we own to the object pools.
            This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.FormatPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Format.ParentPlaceholder">
            <summary>
            Gets the parent <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Format.Items">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>s.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Format.HasNested">
            <summary>
            Returns <see langword="true"/>, if the <see cref="P:SmartFormat.Core.Parsing.Format.Items"/> contain at least one nested <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Substring(System.Int32)">
            <summary>
            Gets a substring of the current <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="start">The start index of the substring.</param>
            <returns>The substring of the current <see cref="T:SmartFormat.Core.Parsing.Format"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Substring(System.Int32,System.Int32)">
            <summary>
            Gets a substring of the current <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="start"></param>
            <param name="length"></param>
            <returns>The substring of the current <see cref="T:SmartFormat.Core.Parsing.Format"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.IndexOf(System.Char)">
            <summary>
            Searches the literal text for the search char.
            Does not search in nested placeholders.
            </summary>
            <param name="search"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.IndexOf(System.Char,System.Int32)">
            <summary>
            Searches the literal text for the search char.
            Does not search in nested placeholders.
            </summary>
            <param name="search"></param>
            <param name="start"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Split(System.Char)">
            <summary>
            Splits the <see cref="T:SmartFormat.Core.Parsing.Format"/> items by the given search character.
            </summary>
            <param name="search">The search character used to split.</param>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Split(System.Char,System.Int32)">
            <summary>
            Splits the <see cref="T:SmartFormat.Core.Parsing.Format"/> items by the given search character.
            </summary>
            <param name="search">e search character used to split.</param>
            <param name="maxCount">The maximum number of <see cref="T:System.Collections.IList"/> of type <see cref="T:SmartFormat.Core.Parsing.Format"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:SmartFormat.Core.Parsing.Format"/>s.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.GetLiteralText">
            <summary>
            Retrieves the literal text contained in this format.
            Excludes escaped chars, and does not include the text
            of placeholders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.ToString">
            <summary>
            Reconstructs the format string, but doesn't include escaped chars
            and tries to reconstruct placeholders.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Dispose(System.Boolean)">
            <summary>
            Returns this instance to the object pool.
            <para>Do not use this instance after calling.</para>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Dispose">
            <summary>
            Returns this instance to the object pool, which also clears all objects it owns.
            <para>Do not use this instance after calling <see cref="M:SmartFormat.Core.Parsing.Format.Dispose"/></para>
            </summary>
            <code>
            // Example:
            var settings = new SmartSettings();
            using var formatParsed = new Parser(settings).ParseFormat("inputFormat");
            var formatter = new SmartFormatter(settings);
            for (var i = 0; i &lt; 10; i++)
            {
               var result = formatter.Format(formatParsed, i);    
            }
            </code>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Format.Finalize">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Core.Parsing.FormatItem">
            <summary>
            Base class that represents a substring
            of text from a parsed format string.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.BaseString">
            <summary>
            Gets the base format string.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.EndIndex">
            <summary>
            The end index is pointing to ONE POSITION AFTER the last character of item.
            </summary>
            <example>
            Format string: {0}{1}ABC
            Index:         012345678
            Start index for 1st placeholder is 0, for the second it's 3, for the literal it's 6.
            End index for the 1st placeholder is 3, for the second it's 6, for the literal it's 9.
            </example>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.StartIndex">
            <summary>
            The start index is pointing to the first character of item.
            </summary>
            <example>
            Format string: {0}{1}ABC
            Index:         012345678
            Start index for 1st placeholder is 0, for the second it's 3, for the literal it's 6.
            End index for the 1st placeholder is 3, for the second it's 6, for the literal it's 9.
            </example>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.Length">
            <summary>
            Gets the result of <see cref="P:SmartFormat.Core.Parsing.FormatItem.EndIndex"/> minus <see cref="P:SmartFormat.Core.Parsing.FormatItem.StartIndex"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.SmartSettings">
            <summary>
            The settings for formatter and parser.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.ParentFormatItem">
            <summary>
            The parent <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> of this instance, <see langword="null"/> if not parent exists.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.FormatItem.Initialize(SmartFormat.Core.Settings.SmartSettings,SmartFormat.Core.Parsing.FormatItem,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> or the derived class.
            </summary>
            <param name="smartSettings"></param>
            <param name="parent">The parent <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> or <see langword="null"/>.</param>
            <param name="baseString">The base format string.</param>
            <param name="startIndex">The start index of the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> within the base format string.</param>
            <param name="endIndex">The end index of the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> within the base format string.</param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.FormatItem.Clear">
            <summary>
            Clears the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> or the derived class.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.FormatItem.RawText">
            <summary>
            Retrieves the raw text that this item represents.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.FormatItem.ToString">
            <summary>
            Gets the string representation of this <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>.
            </summary>
            <returns>The string representation of this <see cref="T:SmartFormat.Core.Parsing.FormatItem"/></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.FormatItem.AsSpan">
            <summary>
            Gets the <see cref="T:System.ReadOnlySpan`1"/> representation of this <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> representation of this <see cref="T:SmartFormat.Core.Parsing.FormatItem"/></returns>
        </member>
        <member name="T:SmartFormat.Core.Parsing.LiteralText">
            <summary>
            Represents the literal text that is found
            in a parsed format string.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.LiteralText.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.LiteralText.Initialize(SmartFormat.Core.Settings.SmartSettings,SmartFormat.Core.Parsing.FormatItem,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> instance, representing the literal text that is found in a parsed format string.
            </summary>
            <param name="smartSettings">The <see cref="T:SmartFormat.Core.Settings.SmartSettings"/>.</param>
            <param name="parent">The parent <see cref="T:SmartFormat.Core.Parsing.FormatItem"/></param>
            <param name="baseString">The reference to the parsed format string.</param>
            <param name="startIndex">The start index of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> in the format string.</param>
            <param name="endIndex">The end index of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> in the format string.</param>
            <returns>The <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> instance, representing the literal text that is found in a parsed format string.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.LiteralText.ToString">
            <summary>
            Get the string representation of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>, with escaped characters converted.
            Note: The <see cref="T:SmartFormat.Core.Parsing.Parser"/> puts each escaped character of an input string
            into its own <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> item.
            </summary>
            <returns>The string representation of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>, with escaped characters converted.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.LiteralText.AsSpan">
            <summary>
            Get the string representation of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>, with escaped characters converted.
            Note: The <see cref="T:SmartFormat.Core.Parsing.Parser"/> puts each escaped character of an input string
            into its own <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> item.
            </summary>
            <returns>The string representation of the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>, with escaped characters converted.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.LiteralText.Clear">
            <summary>
            Clears the <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> item.
            <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.LiteralTextPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Parser">
            <summary>
            Parses a format string.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Parser.Settings">
            <summary>
            Gets or sets the <see cref="T:SmartFormat.Core.Settings.SmartSettings" /> for Smart.Format
            </summary>
        </member>
        <member name="E:SmartFormat.Core.Parsing.Parser.OnParsingFailure">
            <summary>
            Event raising, if an error occurs during parsing.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.#ctor(SmartFormat.Core.Settings.SmartSettings)">
            <summary>
            Creates a new instance of a <see cref="T:SmartFormat.Core.Parsing.Parser"/>.
            </summary>
            <param name="smartSettings">
            The <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> to use, or <see langword="null"/> for default settings.
            Any changes after passing settings as a parameter may not have effect.
            </param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.AddAlphanumericSelectors">
            <summary>
            Includes a-z and A-Z in the list of allowed selector chars.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.AddAdditionalSelectorChars(System.String)">
            <summary>
            Adds specific characters to the allowed selector chars.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.AddOperators(System.String)">
            <summary>
            Adds specific characters to the allowed operator chars.
            An operator is a character that is in the selector string
            that splits the selectors.
            </summary>
            <param name="chars"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.UseAlternativeEscapeChar(System.Char)">
            <summary>
            Sets the AlternativeEscaping option to True
            so that braces will only be escaped after the
            specified character. The only allowed escape character is the backslash '\'.
            </summary>
            <param name="alternativeEscapeChar">Defaults to backslash</param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.UseBraceEscaping">
            <summary>
            Uses {{ and }} for escaping braces for compatibility with string.Format.
            However, this does not work very well with nested placeholders,
            so it is recommended to use an 'alternative' escape char, which is the
            backslash.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.UseAlternativeBraces(System.Char,System.Char)">
            <summary>
            Set the closing and opening braces for the parser.
            </summary>
            <param name="opening"></param>
            <param name="closing"></param>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Parser.IndexContainer">
            <summary>
            The Container for indexes pointing to positions within the input format.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.ObjectLength">
            <summary>
            The length of the target object, where indexes will be used.
            E.g.: ReadOnlySpan&lt;char&gt;().Length or string.Length
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.Current">
            <summary>
            The current index within the input format
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.LastEnd">
            <summary>
            The index within the input format after an item (like <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>, <see cref="F:SmartFormat.Core.Parsing.Parser.IndexContainer.Selector"/>, <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> etc.) was added.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.NamedFormatterStart">
            <summary>
            The start index of the formatter name within the input format.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.NamedFormatterOptionsStart">
            <summary>
            The start index of the formatter options within the input format.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.NamedFormatterOptionsEnd">
            <summary>
            The end index of the formatter options within the input format.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.Operator">
            <summary>
            The index of the operator within the input format.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.IndexContainer.Selector">
            <summary>
            The current index of the selector <b>across all</b> <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.IndexContainer.SafeAdd(System.Int32,System.Int32)">
            <summary>
            Adds a number to the index and returns the sum, but not more than <see cref="F:SmartFormat.Core.Parsing.Parser.IndexContainer.ObjectLength"/>.
            </summary>
            <param name="index"></param>
            <param name="add"></param>
            <returns>The sum, but not more than <see cref="F:SmartFormat.Core.Parsing.Parser.IndexContainer.ObjectLength"/></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)">
            <summary>
            Parses a format string.
            </summary>
            <param name="inputFormat"></param>
            <returns>The <see cref="T:SmartFormat.Core.Parsing.Format"/> for the parsed string.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.AddLiteralCharsParsedBefore">
            <summary>
            Adds a new <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> item, if there are characters left to process.
            Sets <see cref="F:SmartFormat.Core.Parsing.Parser.IndexContainer.LastEnd"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.HasProcessedTooMayClosingBraces(SmartFormat.Core.Parsing.ParsingErrors)">
            <summary>
            Checks, whether we are on top level and still there was a closing brace.
            In this case we add the redundant brace as literal and create a <see cref="T:SmartFormat.Core.Parsing.Parser.ParsingError"/>.
            </summary>
            <param name="parsingErrors">The list of <see cref="T:SmartFormat.Core.Parsing.ParsingErrors"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.EscapeLikeStringFormat(System.Char)">
            <summary>
            In case of string.Format compatibility, we escape the brace
            and treat it as a literal character.
            </summary>
            <param name="brace">The brace { or } to process.</param>
            <returns><see langword="true">, if escaping was done.</see></returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.CreateNewPlaceholder(System.Int32@,SmartFormat.Core.Parsing.Placeholder@)">
            <summary>
            Creates a new <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>, adds it to the current format and sets values in <see cref="T:SmartFormat.Core.Parsing.Parser.IndexContainer"/>.
            </summary>
            <param name="nestedDepth">The counter for nesting levels.</param>
            <param name="newPlaceholder"></param>
            <returns>The new <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.FinishPlaceholderFormat(System.Int32@)">
            <summary>
            Finishes the current placeholder <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="nestedDepth">The counter for nesting levels.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseAlternativeEscaping">
            <summary>
            Processes the character if alternative escaping is used.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseNamedFormatter">
            <summary>
            Handles named formatters.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseSelector(SmartFormat.Core.Parsing.Placeholder@,SmartFormat.Core.Parsing.ParsingErrors,System.Int32@)">
            <summary>
            Handles the selectors.
            </summary>
            <param name="currentPlaceholder"></param>
            <param name="parsingErrors"></param>
            <param name="nestedDepth"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.AddLastSelector(SmartFormat.Core.Parsing.Placeholder@,SmartFormat.Core.Parsing.ParsingErrors)">
            <summary>
            Adds a <see cref="T:SmartFormat.Core.Parsing.Selector"/> to the current <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>
            because the current character ':' or '}' indicates the end of a selector.
            </summary>
            <param name="currentPlaceholder"></param>
            <param name="parsingErrors"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseFormatOptions">
            <summary>
            Parses all option characters.
            This short-circuits the Parser.ParseFormat main loop.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParseHtmlTags">
            <summary>
            'style' and 'script' tags may contain curly or square braces, which SmartFormat uses to identify <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s.
            Also, comments may contain any characters, which could mix up the parser.
            That's why the parser will treat all content inside 'style' and 'script' tags as <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>,
            if <see cref="P:SmartFormat.Core.Settings.ParserSettings.ParseInputAsHtml"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Parser.ParsingError">
            <summary>
            Parsing errors.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.ParsingError.TooManyClosingBraces">
            <summary>
            Too many closing braces.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.ParsingError.TrailingOperatorsInSelector">
            <summary>
            Trailing operators in the selector.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.ParsingError.InvalidCharactersInSelector">
            <summary>
            Invalid characters in the selector.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Parsing.Parser.ParsingError.MissingClosingBrace">
            <summary>
            Missing closing brace.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Parser.ParsingErrorText">
            <summary>
            Supplies error text for the <see cref="T:SmartFormat.Core.Parsing.Parser"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.ParsingErrorText.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Parser.ParsingErrorText.Item(SmartFormat.Core.Parsing.Parser.ParsingError)">
            <summary>
            Gets the string representation of the ParsingError enum.
            </summary>
            <param name="parsingErrorKey"></param>
            <returns>The string representation of the ParsingError enum</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Parser.HandleParsingErrors(SmartFormat.Core.Parsing.ParsingErrors,SmartFormat.Core.Parsing.Format)">
            <summary>
            Handles <see cref="T:SmartFormat.Core.Parsing.Parser.ParsingError"/>s as defined in <see cref="P:SmartFormat.Core.Settings.SmartSettings.ParseErrorAction"/>.
            </summary>
            <param name="parsingErrors"></param>
            <param name="currentResult"></param>
            <returns>The <see cref="T:SmartFormat.Core.Parsing.Format"/> which will be further processed by the formatter.</returns>
        </member>
        <member name="T:SmartFormat.Core.Parsing.ParsingErrorEventArgs">
            <summary>
            Supplies information about parsing errors.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrorEventArgs.Errors">
            <summary>
            All parsing errors which occurred during parsing.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrorEventArgs.ThrowsException">
            <summary>
            If <see langword="true"/>, errors will throw an exception.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.ParsingErrors">
            <summary>
            Represents parsing errors in a format string.
            This exception only gets thrown when Parser.ErrorAction is set to ThrowError.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.Initialize(SmartFormat.Core.Parsing.Format)">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.ParsingErrors"/>.
            </summary>
            <param name="result">The <see cref="T:SmartFormat.Core.Parsing.Format"/> that caused the error.</param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.ParsingErrors"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.Clear">
            <summary>
            Clears the <see cref="P:SmartFormat.Core.Parsing.ParsingErrors.Issues"/> list.
            <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.ParsingErrorsPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.Issues">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue"/>s./>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.HasIssues">
            <summary>
            Returns <see langword="true"/> if the <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue"/>s contains elements.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.MessageShort">
            <summary>
            Gets the short version of an error message.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.Message">
            <summary>
            Gets the long version of an error message.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.AddIssue(SmartFormat.Core.Parsing.Format,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a new <see cref="T:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue"/>.
            </summary>
            <param name="parent"></param>
            <param name="issue"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="T:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue">
            <summary>
            The class represents a list of parsing issues.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue"/>.
            </summary>
            <param name="issue"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue.Index">
            <summary>
            Gets the index within the format string, where an error occurred.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue.Length">
            <summary>
            Gets the length starting from the <see cref="P:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue.Index"/> which has errors.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.ParsingErrors.ParsingIssue.Issue">
            <summary>
            Gets the description of an error issue.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Placeholder">
            <summary>
            A placeholder is the part of a format string between the {braces}.
            </summary>
            <example>
            For example, in "{Items.Length,-10:choose(1|2|3):one|two|three}",
            the <see cref="P:SmartFormat.Core.Parsing.Placeholder.Alignment" />s is "-10",
            the <see cref="T:SmartFormat.Core.Parsing.Selector" />s are "Items" and "Length", separated by the dot "Operator".
            the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterName" /> is "choose",
            the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptionsRaw" /> is "1|2|3",
            and the <see cref="P:SmartFormat.Core.Parsing.Placeholder.Format" /> is "one|two|three".
            </example>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.Initialize(SmartFormat.Core.Parsing.Format,System.Int32,System.Int32)">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
            <param name="parent">The parent <see cref="P:SmartFormat.Core.Parsing.Placeholder.Format"/> of the placeholder</param>
            <param name="startIndex">The index inside the input string, where the placeholder starts.</param>
            <param name="nestedDepth">The nesting level of this placeholder.</param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.Clear">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.ReturnToPool">
            <summary>
            Return items we own to the object pools.
            <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.LiteralTextPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.Parent">
            <summary>
            Gets the parent <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.NestedDepth">
            <summary>
            Gets or sets the nesting level the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.Selectors">
            <summary>
            Gets a list of all <see cref="T:SmartFormat.Core.Parsing.Selector"/> within the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.GetSelectors">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of all <see cref="T:SmartFormat.Core.Parsing.Selector"/>s within the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.AddSelector(SmartFormat.Core.Parsing.Selector)">
            <summary>
            Add a new <see cref="T:SmartFormat.Core.Parsing.Selector"/> to the list <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/>.
            If the <see cref="T:SmartFormat.Core.Parsing.Selector"/> has an alignment operator, the <see cref="P:SmartFormat.Core.Parsing.Placeholder.Alignment"/> will be set.
            </summary>
            <param name="selector">The <see cref="T:SmartFormat.Core.Parsing.Selector"/> to add.</param>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.Alignment">
            <summary>
            Gets or sets the <see cref="P:SmartFormat.Core.Parsing.Placeholder.Alignment"/> of the result string,
            used like with string.Format("{0,-10}"), where -10 is the alignment.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterNameStartIndex">
            <summary>
            Gets or sets the start index of the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterName"/> within the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterNameLength">
            <summary>
            Gets or sets the length of the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterName"/> within the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptionsStartIndex">
            <summary>
            Gets or sets the start index of the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptions"/> within the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptionsLength">
            <summary>
            Gets or sets the length of the <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptions"/> within the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterName">
            <summary>
            Gets the name of the formatter.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptions">
            <summary>
            Gets the formatter option string unescaped.
            To get the raw formatter option string, <see cref="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptionsRaw"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.FormatterOptionsRaw">
            <summary>
            Gets the raw formatter option string as in the input format string (unescaped).
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Placeholder.Format">
            <summary>
            Gets or sets the <see cref="P:SmartFormat.Core.Parsing.Placeholder.Format"/> of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Placeholder.ToString">
            <summary>
            Gets the string representation of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> with all parsed components.
            </summary>
            <returns>The string representation of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> with all parsed components.</returns>
        </member>
        <member name="T:SmartFormat.Core.Parsing.Selector">
            <summary>
            Represents a single selector in a <see cref="T:SmartFormat.Core.Parsing.Placeholder" />.
            E.g.: {selector0.selector1?.selector2}, while "." and "?." and "?[]" are operators.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Selector.OperatorStartIndex">
            <summary>
            The start index of the <see cref="P:SmartFormat.Core.Parsing.Selector.Operator"/> inside of a <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Selector.OperatorLength">
            <summary>
            Gets the length of the operator.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Selector.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Selector.Initialize(SmartFormat.Core.Settings.SmartSettings,SmartFormat.Core.Parsing.FormatItem,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes this <see cref="T:SmartFormat.Core.Parsing.Selector"/> instance.
            </summary>
            <param name="settings"></param>
            <param name="parent">The parent <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>.</param>
            <param name="baseString">The input format string</param>
            <param name="startIndex">The start index of the selector inside the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/></param>
            <param name="endIndex">The end index of the selector inside the <see cref="P:SmartFormat.Core.Parsing.FormatItem.BaseString"/></param>
            <param name="operatorStartIndex"></param>
            <param name="selectorIndex"></param>
        </member>
        <member name="M:SmartFormat.Core.Parsing.Selector.Clear">
            <summary>
            Clears the <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.SelectorPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Selector.SelectorIndex">
            <summary>
            The index of the selector in a multi-part selector.
            Example: {Person.Birthday.Year} has 3 selectors,
            and Year has a SelectorIndex of 2.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Parsing.Selector.Operator">
            <summary>
            Gets the operator characters.
            </summary>
            <example>
            The operator that came between selectors is typically ("." or "?.")
            </example>
        </member>
        <member name="T:SmartFormat.Core.Parsing.SplitList">
            <summary>
            Contains the results of a <see cref="T:SmartFormat.Core.Parsing.Format"/> Split operation.
            This allows deferred splitting of items.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.#ctor">
            <summary>
            CTOR for object pooling.
            Immediately after creating the instance, an overload of 'Initialize' must be called.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Initialize(SmartFormat.Core.Parsing.Format,System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes the instance of <see cref="T:SmartFormat.Core.Parsing.SplitList"/>.
            </summary>
            <param name="format"></param>
            <param name="splits"></param>
            <returns>This <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</returns>
        </member>
        <member name="P:SmartFormat.Core.Parsing.SplitList.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Clear">
            <summary>
            Clears the <see cref="T:SmartFormat.Core.Parsing.SplitList"/> item.
            <para>This method gets called by <see cref="T:SmartFormat.Pooling.SmartPools.SplitListPool"/> <see cref="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn"/>.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.CopyTo(SmartFormat.Core.Parsing.Format[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Core.Parsing.SplitList.Count">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Core.Parsing.SplitList.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.IndexOf(SmartFormat.Core.Parsing.Format)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Insert(System.Int32,SmartFormat.Core.Parsing.Format)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.RemoveAt(System.Int32)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Add(SmartFormat.Core.Parsing.Format)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Contains(SmartFormat.Core.Parsing.Format)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.Remove(SmartFormat.Core.Parsing.Format)">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.GetEnumerator">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Parsing.SplitList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method is not implemented.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.CaseSensitivityType">
            <summary>
            An enumeration of types defining whether string will be processed case-sensitive.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.CaseSensitivityType.CaseSensitive">
            <summary>
            String are processed case-sensitive.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.CaseSensitivityType.CaseInsensitive">
            <summary>
            String are not processed case-sensitive.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.ErrorAction">
            <summary>
            Determines how format errors are handled.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ErrorAction.ThrowError">
            <summary>Throws an exception. This is only recommended for debugging, so that formatting errors can be easily found.</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ErrorAction.OutputErrorInResult">
            <summary>Includes an issue message in the output</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ErrorAction.Ignore">
            <summary>Ignores errors and tries to output the data anyway</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ErrorAction.MaintainTokens">
            <summary>Leaves invalid tokens unmodified in the text.</summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.FormatErrorAction">
            <summary>
            Determines how format errors are handled.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.FormatErrorAction.ThrowError">
            <summary>Throws an exception. This is only recommended for debugging, so that formatting errors can be easily found.</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.FormatErrorAction.OutputErrorInResult">
            <summary>Includes an issue message in the output</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.FormatErrorAction.Ignore">
            <summary>Ignores errors and tries to output the data anyway</summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.FormatErrorAction.MaintainTokens">
            <summary>Leaves invalid tokens unmodified in the text.</summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.FormatterSettings">
            <summary>
            Class for <see cref="T:SmartFormat.SmartFormatter"/> settings.
            Properties should be considered as 'init-only' like implemented in C# 9.
            Any changes after passing settings as argument to CTORs may not have effect. 
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.FormatterSettings.ErrorAction">
            <summary>
            Gets or sets the <see cref="P:SmartFormat.Core.Settings.FormatterSettings.ErrorAction" /> to use for the <see cref="T:SmartFormat.SmartFormatter" />.
            The default is <see cref="F:SmartFormat.Core.Settings.FormatErrorAction.ThrowError"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.FormatterSettings.AlignmentFillCharacter">
            <summary>
            Gets or sets the character which is used for pre-aligning or post-aligning items (e.g.: {Placeholder,10} for an alignment width of 10).
            Default is the space character (0x20).
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.Localization">
            <summary>
            <see cref="N:SmartFormat" /> settings to be applied for localization.
            <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> are used to initialize instances.
            Properties should be considered as 'init-only' like implemented in C# 9.
            Any changes after passing settings as argument to CTORs may not have effect. 
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.Localization.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.Localization.LocalizationProvider">
            <summary>
            Gets or sets the <see cref="T:SmartFormat.Utilities.ILocalizationProvider"/> used for localizing strings.
            Defaults to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.ParseErrorAction">
            <summary>
            Determines how parsing errors are handled.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ParseErrorAction.ThrowError">
            <summary>
            Throws an <see cref="T:System.Exception"/>, if an error occurs.
            This is only recommended for debugging, so that formatting errors can be easily found.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ParseErrorAction.OutputErrorInResult">
            <summary>
            Includes an issue message in the output.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ParseErrorAction.Ignore">
            <summary>
            Ignores errors and tries to output the data anyway.
            </summary>
        </member>
        <member name="F:SmartFormat.Core.Settings.ParseErrorAction.MaintainTokens">
            <summary>
            Leaves invalid tokens unmodified in the text.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.ParserSettings">
            <summary>
            Class for <see cref="T:SmartFormat.Core.Parsing.Parser"/> settings.
            Properties should be considered as 'init-only' like implemented in C# 9.
            Any changes after passing settings as argument to CTORs may not have effect. 
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.ErrorAction">
            <summary>
            Gets or sets the <see cref="T:SmartFormat.Core.Settings.ParseErrorAction" /> to use for the <see cref="T:SmartFormat.Core.Parsing.Parser" />.
            The default is <see cref="F:SmartFormat.Core.Settings.ParseErrorAction.ThrowError"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.SelectorChars">
            <summary>
            The list of standard selector characters.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.CustomSelectorChars">
            <summary>
            Gets a read-only list of the custom selector characters, which were set with <see cref="M:SmartFormat.Core.Settings.ParserSettings.AddCustomSelectorChars(System.Collections.Generic.IList{System.Char})"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.DisallowedSelectorChars">
            <summary>
            Gets a list of characters which are allowed in a selector.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.CustomOperatorChars">
            <summary>
            Gets a read-only list of the custom operator characters, which were set with <see cref="M:SmartFormat.Core.Settings.ParserSettings.AddCustomSelectorChars(System.Collections.Generic.IList{System.Char})"/>.
            Contiguous operator characters are parsed as one operator (e.g. '?.').
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.AddCustomSelectorChars(System.Collections.Generic.IList{System.Char})">
            <summary>
            Add a list of allowable selector characters on top of the <see cref="M:SmartFormat.Core.Settings.ParserSettings.SelectorChars"/> setting.
            This can be useful to support additional selector syntax such as math.
            Characters in <see cref="M:SmartFormat.Core.Settings.ParserSettings.DisallowedSelectorChars"/> cannot be added.
            Operator chars and selector chars must be different.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.AddCustomOperatorChars(System.Collections.Generic.IList{System.Char})">
            <summary>
            Add a list of allowable operator characters on top of the standard <see cref="M:SmartFormat.Core.Settings.ParserSettings.OperatorChars"/> setting.
            Operator chars and selector chars must be different.
             </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.ConvertCharacterStringLiterals">
            <summary>
            This setting is relevant for the <see cref="T:SmartFormat.Core.Parsing.LiteralText" />.
            If <see langword="true"/> (the default), character string literals are treated like in "normal" string.Format:
            string.Format("\t")   will return a "TAB" character
            If <see langword="false"/>, character string literals are not converted, just like with this string.Format:
            string.Format(@"\t")  will return the 2 characters "\" and "t"
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.ParseInputAsHtml">
            <summary>
            <para>Experimental.</para>
            Gets or sets, whether the input format should be interpreted as HTML.
            If <see langword="true"/>, the <see cref="T:SmartFormat.Core.Parsing.Parser"/> will parse all content
            inside &lt;script&gt; and &lt;style&gt; tags as <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>. All other tags may contain <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s.
            This is because &lt;script&gt; and &lt;style&gt; tags may contain curly or square braces, that interfere with <c>SmartFormat</c>.
            Default is <see langword="false"/>.
            <para>
            Best results can only be expected with clean HTML: balanced opening and closing tags, single and double quotes.
            Also, do not use angle brackets, single and double quotes in script or style comments.
            <c>SmartFormat</c> is not a fully-fledged HTML parser. If this is required, use <c>AngleSharp</c> or <c>HtmlAgilityPack</c>.
            </para>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.CharLiteralEscapeChar">
            <summary>
            The character literal escape character for <see cref="P:SmartFormat.Core.Settings.ParserSettings.PlaceholderBeginChar"/> and <see cref="P:SmartFormat.Core.Settings.ParserSettings.PlaceholderEndChar"/>,
            but also others like for \t (TAB), \n (NEW LINE), \\ (BACKSLASH) and others defined in <see cref="T:SmartFormat.Core.Parsing.EscapedLiteral"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.FormatterNameSeparator">
            <summary>
            The character which separates the formatter name (if any exists) from other parts of the placeholder.
            E.g.: {Variable:FormatterName:argument} or {Variable:FormatterName}
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.OperatorChars">
            <summary>
            The standard operator characters.
            Contiguous operator characters are parsed as one operator (e.g. '?.').
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.AlignmentOperator">
            <summary>
            The character which separates the selector for alignment. <c>E.g.: Smart.Format("Name: {name,10}")</c>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.SelectorOperator">
            <summary>
            The character which separates two or more selectors <c>E.g.: "First.Second.Third"</c>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.NullableOperator">
            <summary>
            The character which flags the selector as <see langword="nullable"/>.
            The character after <see cref="P:SmartFormat.Core.Settings.ParserSettings.NullableOperator"/> must be the <see cref="P:SmartFormat.Core.Settings.ParserSettings.SelectorOperator"/>.
            <c>E.g.: "First?.Second"</c>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.PlaceholderBeginChar">
            <summary>
            Gets the character indicating the start of a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.PlaceholderEndChar">
            <summary>
            Gets the character indicating the end of a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.FormatterOptionsBeginChar">
            <summary>
            Gets the character indicating the begin of formatter options.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.FormatterOptionsEndChar">
            <summary>
            Gets the character indicating the end of formatter options.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.ListIndexBeginChar">
            <summary>
            Gets the character indicating the begin of a list index, like in "{Numbers[0]}"
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.ParserSettings.ListIndexEndChar">
            <summary>
            Gets the character indicating the end of a list index, like in "{Numbers[0]}"
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.ParserSettings.FormatOptionsTerminatorChars">
            <summary>
            Characters which terminate parsing of format options.
            To use them as options, they must be escaped (preceded) by the <see cref="P:SmartFormat.Core.Settings.ParserSettings.CharLiteralEscapeChar"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Core.Settings.PoolSettings">
            <summary>
            Contains global static settings for all object pools.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.PoolSettings.IsPoolingEnabled">
            <summary>
            Gets or sets whether object pools will tackle created and returned objects.
            If <see langword="false"/>, the pools are still used for creating new instances, but without tracking.
            <para>The setting is respected by all subclasses of <see cref="T:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1"/>.</para>
            Default is <see langword="true"/>.<br/>
            This setting will have immediate effect at any time.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.PoolSettings.CheckReturnedObjectsExistInPool">
            <summary>
            Defines, whether trying to return an object, that has already been
            returned to the pool should throw.
            <para>This setting will have immediate effect at any time.</para>
            </summary>
            <remarks>
            Should be <see langword="true"/> when debugging.
            Enabling has a performance drawback.
            </remarks>
        </member>
        <member name="T:SmartFormat.Core.Settings.SmartSettings">
            <summary>
            <see cref="N:SmartFormat" /> settings to be applied for parsing and formatting.
            <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> are used to initialize instances.
            Properties should be considered as 'init-only' like implemented in C# 9.
            Any changes after passing settings as argument to CTORs may not have effect,
            unless explicitly mentioned.
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.SmartSettings.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.IsThreadSafeMode">
            <summary>
            Gets or sets the thread safety mode.
            Thread safety is relevant for global caching, lists and object pools,
            which can be filled from different threads concurrently.
            <para><see langword="true"/> does <b>not</b> guarantee thread safety of all classes.</para>
            Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.StringFormatCompatibility">
            <summary>
            Uses <c>string.Format</c>-compatible escaping of curly braces, {{ and }},
            instead of the <c>Smart.Format</c> default escaping, \{ and \}.
            <para>Custom formatters cannot be parsed / used, if set to <see langword="true"/>.</para>
            <para>Default is <see langword="false"/>.</para>
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.FormatErrorAction">
            <summary>
            Gets the <see cref="T:SmartFormat.Core.Settings.ErrorAction" /> to apply for the <see cref="T:SmartFormat.SmartFormatter" />.
            The default is <see cref="F:SmartFormat.Core.Settings.ErrorAction.ThrowError"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.ParseErrorAction">
            <summary>
            Gets the <see cref="T:SmartFormat.Core.Settings.ErrorAction" /> to apply for the <see cref="T:SmartFormat.Core.Parsing.Parser" />.
            The default is <see cref="F:SmartFormat.Core.Settings.ErrorAction.ThrowError"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity">
            <summary>
            Determines whether placeholders are case-sensitive or not.
            The default is <see cref="F:SmartFormat.Core.Settings.CaseSensitivityType.CaseSensitive"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.ConvertCharacterStringLiterals">
            <summary>
            This setting is relevant for the <see cref="T:SmartFormat.Core.Parsing.LiteralText" />.
            If true (the default), character string literals are treated like in "normal" string.Format:
            string.Format("\t")   will return a "TAB" character
            If false, character string literals are not converted, just like with this string.Format:
            string.Format(@"\t")  will return the 2 characters "\" and "t"
            </summary>
        </member>
        <member name="M:SmartFormat.Core.Settings.SmartSettings.GetCaseSensitivityComparer">
            <summary>
            Gets the <see cref="T:System.StringComparer"/> that belongs to the <see cref="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity"/> setting.
            </summary>
            <returns>The <see cref="T:System.StringComparer"/> that belongs to the <see cref="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity"/> setting.</returns>
        </member>
        <member name="M:SmartFormat.Core.Settings.SmartSettings.GetCaseSensitivityComparison">
            <summary>
            Gets the <see cref="T:System.StringComparison"/> that belongs to the <see cref="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity"/> setting.
            </summary>
            <returns>The <see cref="T:System.StringComparison"/> that belongs to the <see cref="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity"/> setting.</returns>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.Parser">
            <summary>
            Gets the settings for the parser.
            Set only during initialization.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.Formatter">
            <summary>
            Gets the settings for the formatter.
            Set only during initialization.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.Localization">
            <summary>
            Gets the settings for <see cref="P:SmartFormat.Core.Settings.SmartSettings.Localization"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Core.Settings.SmartSettings.Pooling">
            <summary>
            Gets the global static <see cref="T:SmartFormat.Core.Settings.PoolSettings"/> for object pooling.
            <para>These settings must be defined before any class calling the object pools is instantiated. They cannot be changed later.</para>
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator">
            <summary>
            The <see cref="T:SmartFormat.Evaluator"/> class evaluates the <see cref="T:SmartFormat.Core.Parsing.Format"/>s and <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s.
            using <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions, and formats these values using <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions.
            Additionally, it handles errors that occur during evaluation, and provides an event for error handling.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.#ctor(SmartFormat.SmartFormatter)">
            <summary>
            Creates a new instance of the <see cref="T:SmartFormat.Evaluator"/> class.
            </summary>
            <param name="formatter"></param>
        </member>
        <member name="M:SmartFormat.Evaluator.WriteFormat(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            Writes all items of the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/> property of the <paramref name="formattingInfo"/>
            to the <paramref name="formattingInfo"/>.<see cref="P:SmartFormat.Core.Formatting.FormatDetails.Output"/>.
            </summary>
            <param name="formattingInfo">The <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/> must not be null.</param>
        </member>
        <member name="M:SmartFormat.Evaluator.EvaluatePlaceholder(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            Tries to get the value for a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s by evaluating its <see cref="T:SmartFormat.Core.Parsing.Selector"/>s from <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions.
            </summary>
            <param name="formattingInfo">The <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/> must be set.</param>
            <returns><see langword="true"/>, if evaluating the placeholder was successful.</returns>
            <exception cref="T:SmartFormat.Core.Formatting.FormattingException">Throws if no <see cref="T:SmartFormat.Core.Extensions.ISource"/> could get the value.</exception>
        </member>
        <member name="M:SmartFormat.Evaluator.TryGetValue(SmartFormat.Core.Formatting.FormattingInfo,SmartFormat.Core.Parsing.Placeholder,System.Object@)">
            <summary>
            Gets the value for a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s by evaluating its <see cref="T:SmartFormat.Core.Parsing.Selector"/>s from <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions.
            </summary>
            <param name="parentFormattingInfo"></param>
            <param name="placeholder"></param>
            <param name="result">The value for the given <paramref name="placeholder"/> from the registered <see cref="T:SmartFormat.Core.Extensions.ISource"/>s.</param>
            <returns><see langword="true"/>, if one of the <see cref="T:SmartFormat.Core.Extensions.ISource"/> returned a value.</returns>
        </member>
        <member name="M:SmartFormat.Evaluator.EvaluateSelectors(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            Evaluates all <see cref="T:SmartFormat.Core.Parsing.Selector"/>s of a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
            <remarks>
            Note: If there is no selector (like {:0.00}), <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.CurrentValue"/> is left unchanged.
            <br/>
            Child formats <b>inside <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s</b> are evaluated with <see cref="T:SmartFormat.Extensions.DefaultFormatter"/>.
            Example: "{ChildOne.ChildTwo.ChildThree:{}{Four}}" where "{} and {Four}" are child placeholders.
            </remarks>
            <param name="formattingInfo">The <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/> must be set.</param>
            <exception cref="T:SmartFormat.Core.Formatting.FormattingException"></exception>
        </member>
        <member name="M:SmartFormat.Evaluator.HandleNestedScope(SmartFormat.Core.Formatting.FormattingInfo,SmartFormat.Core.Parsing.Selector,System.ValueTuple{System.Boolean,System.Type}@)">
            <summary>
            Handles "nested scopes" like "{ChildOne.ChildTwo.ChildThree:{}{:Four}}" where "{} and {:Four}" are child placeholders.
            by traversing the stack.
            </summary>
            <param name="formattingInfo"></param>
            <param name="selector"></param>
            <param name="handled"></param>
        </member>
        <member name="M:SmartFormat.Evaluator.SkipThisSelector(SmartFormat.Core.Parsing.Selector)">
            <summary>
            Skip empty selectors and alignment-only selectors.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.InvokeFormatters(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            Try to get a suitable formatter and invoke it.
            </summary>
            <param name="formattingInfo">The <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Placeholder"/> must be set.</param>
            <exception cref="T:SmartFormat.Core.Formatting.FormattingException"></exception>
        </member>
        <member name="E:SmartFormat.Evaluator.OnFormattingFailure">
            <summary>
            Event is raising, when an error occurs during evaluation of values or formats.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnFormat">
            <summary>
            Event raised when a <see cref="T:SmartFormat.Core.Parsing.Format"/> is encountered.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnLiteral">
            <summary>
            Event raised when a <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>> is encountered.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnPlaceholder">
            <summary>
            Event raised when a <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> is encountered.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnSelectorValue">
            <summary>
            Event raised when a <see cref="T:SmartFormat.Core.Parsing.Selector"/> is evaluated.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnSelectorFailure">
            <summary>
            Event raised when a <see cref="T:SmartFormat.Core.Parsing.Selector"/> fails to evaluate.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnFormattingStart">
            <summary>
            Event raised when formatting starts.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnOutputWritten">
            <summary>
            Event raised when output was written by a <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Evaluator.OnFormattingEnd">
            <summary>
            Event raised when formatting ends.
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator.FormatEventArgs">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnFormat"/> event.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.FormatEventArgs.#ctor(SmartFormat.Core.Parsing.Format)">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnFormat"/> event.
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator.LiteralEventArgs">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnLiteral"/> event.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.LiteralEventArgs.#ctor(System.String)">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnLiteral"/> event.
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator.PlaceholderEventArgs">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnPlaceholder"/> event.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.PlaceholderEventArgs.#ctor(SmartFormat.Core.Parsing.Placeholder)">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnPlaceholder"/> event.
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator.SelectorValueEventArgs">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnSelectorValue"/> event.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.SelectorValueEventArgs.#ctor(SmartFormat.Core.Parsing.Selector,System.Boolean,System.Type,System.Object)">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnSelectorValue"/> event.
            </summary>
        </member>
        <member name="T:SmartFormat.Evaluator.FormattingEventArgs">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnFormattingStart"/> and <see cref="F:SmartFormat.Evaluator.OnFormattingEnd"/> events.
            </summary>
        </member>
        <member name="M:SmartFormat.Evaluator.FormattingEventArgs.#ctor(SmartFormat.Core.Parsing.Selector,System.Object,System.Boolean,System.Type)">
            <summary>
            Arguments for the <see cref="F:SmartFormat.Evaluator.OnFormattingStart"/> and <see cref="F:SmartFormat.Evaluator.OnFormattingEnd"/> events.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.ChooseFormatter">
            <summary>
            A class to output literals depending on the value of the input variable.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ChooseFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ChooseFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ChooseFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.ChooseFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Extensions.ChooseFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="P:SmartFormat.Extensions.ChooseFormatter.CaseSensitivity">
            <summary>
            Sets or gets the <see cref="T:SmartFormat.Core.Settings.CaseSensitivityType"/> for option strings.
            Defaults to <see cref="F:SmartFormat.Core.Settings.CaseSensitivityType.CaseSensitive"/>.
            Comparison of option strings is culture-aware.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.ConditionalFormatter">
            <summary>
            A class to format primitive types with condition patterns.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ConditionalFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ConditionalFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.ConditionalFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.ConditionalFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.ConditionalFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.ConditionalFormatter.TryEvaluateCondition(SmartFormat.Core.Parsing.Format,System.Decimal,System.Boolean@,SmartFormat.Core.Parsing.Format@)">
            <summary>
            Evaluates a conditional format.
            Each condition must start with a comparer: "&gt;/&gt;=", "&lt;/&lt;=", "=", "!=".
            Conditions must be separated by either "&amp;" (AND) or "/" (OR).
            The conditional statement must end with a "?".
            Examples:
            &gt;=21&amp;&lt;30&amp;!=25/=40?
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.CustomPluralRuleProvider">
            <summary>
            Use this class to provide custom plural rules to Smart.Format
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.CustomPluralRuleProvider.#ctor(SmartFormat.Utilities.PluralRules.PluralRuleDelegate)">
            <summary>
            Creates a new instance of a <see cref="T:SmartFormat.Extensions.CustomPluralRuleProvider"/>.
            </summary>
            <param name="pluralRule">The delegate for plural rules.</param>
        </member>
        <member name="M:SmartFormat.Extensions.CustomPluralRuleProvider.GetFormat(System.Type)">
            <summary>
            Gets the format <see cref="T:System.Object"/> for a <see cref="T:SmartFormat.Extensions.CustomPluralRuleProvider"/>.
            </summary>
            <param name="formatType"></param>
            <returns>The format <see cref="T:System.Object"/> for a <see cref="T:SmartFormat.Extensions.CustomPluralRuleProvider"/> or <see langword="null"/>.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.CustomPluralRuleProvider.GetPluralRule">
            <summary>
            Gets the <see cref="T:SmartFormat.Utilities.PluralRules.PluralRuleDelegate"/> of the current <see cref="T:SmartFormat.Extensions.CustomPluralRuleProvider"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartFormat.Extensions.DefaultFormatter">
            <summary>
            Does the default formatting.
            This formatter in always required, unless you implement your own.
            <pre/>
            It supports <see cref="T:System.IFormattable"/> and <see cref="T:System.ICustomFormatter"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.DefaultFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.DefaultFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.DefaultFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Extensions.DefaultFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Checks, if the current value of the <see cref="T:SmartFormat.Core.Extensions.ISelectorInfo"/> can be processed by the <see cref="T:SmartFormat.Extensions.DefaultFormatter"/>.
            </summary>
            <param name="formattingInfo"></param>
            <returns>Returns true, if the current value of the <see cref="T:SmartFormat.Core.Extensions.ISelectorInfo"/> can be processed by the <see cref="T:SmartFormat.Extensions.DefaultFormatter"/></returns>
        </member>
        <member name="T:SmartFormat.Extensions.DefaultSource">
            <summary>
            Class to evaluate an index-based <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            Include this source, if an indexed source shall be used just the way string.Format does.
            </summary>
            <example>
            Smart.Format("{0}-{1}", 1234, 5678);
            </example>
        </member>
        <member name="M:SmartFormat.Extensions.DefaultSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.DictionarySource">
            <summary>
            Class to evaluate sources of types <see cref="T:System.Collections.IDictionary"/>,
            generic <see cref="T:System.Collections.Generic.IDictionary`2"/>, dynamic <see cref="T:System.Dynamic.ExpandoObject"/>,
            and <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            Include this source, if any of these types shall be used.
            <para/>
            For support of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>, <see cref="P:SmartFormat.Extensions.DictionarySource.IsIReadOnlyDictionarySupported"/> must be set to <see langword="true"/>.
            This uses Reflection and is slower than the other types despite caching.
            The cache scope is limited to this instance of <see cref="T:SmartFormat.Extensions.DictionarySource"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.DictionarySource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.DictionarySource.TryGetIDictionaryValue(System.Object,System.String,System.StringComparison,System.Object@)">
            <summary>
            See if <paramref name="current"/> is an IDictionary (including generic dictionaries) that contains the selector.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.DictionarySource.TryGetGenericDictionaryValue(System.Object,System.String,System.StringComparison,System.Object@)">
            <summary>
            Try to get the selector value for <see cref="T:System.Collections.Generic.Dictionary`2"/> and dynamics (<see cref="T:System.Dynamic.ExpandoObject"/>).
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.DictionarySource.RoDictionaryTypeCache">
            <summary>
            Gets the instance type cache <see cref="T:System.Collections.Generic.IDictionary`2"/> for <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            It could e.g. be pre-filled or cleared in a derived class.
            The cache scope is limited to this instance of <see cref="T:SmartFormat.Extensions.DictionarySource"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.DictionarySource.IsIReadOnlyDictionarySupported">
            <summary>
            Gets or sets, whether the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface should be supported.
            Although caching is used, this is still slower than the other types.
            Default is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.GlobalVariablesSource">
            <summary>
            Provides global (static) variables of type <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to the <see cref="T:SmartFormat.SmartFormatter"/>
            that do not need to be passed in as arguments when formatting a string.
            <para>The smart string should take the placeholder format like {groupName.variableName}.</para>
            <para>Note: <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariablesGroup"/>s from args to SmartFormatter.Format(...) take precedence over <see cref="T:SmartFormat.Extensions.PersistentVariablesSource"/>.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.GlobalVariablesSource.Reset">
            <summary>
            Initializes the current <see cref="P:SmartFormat.Extensions.GlobalVariablesSource.Instance"/> with a new, empty instance.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.GlobalVariablesSource.Instance">
            <summary>
            Gets the static instance of the <see cref="T:SmartFormat.Extensions.GlobalVariablesSource"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.IsMatchFormatter">
             <summary>
             Formatter with evaluation of regular expressions.
             The formatter can output matching group values.
             </summary>
             <example>
             Syntax:
               {value:ismatch(regex): format | default}
            
             Or in context of a list:
               {myList:list:{:ismatch(^regex$):{:format}|'no match'}|, | and }
            
             Or with output of the first matching group value:
               {value:ismatch(regex):First match in '{}'\\: {m[1]}|No match}
             
             </example>
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.IsMatchFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.RegexOptions">
            <summary>
            Gets or sets the <see cref="P:SmartFormat.Extensions.IsMatchFormatter.RegexOptions"/> for the <see cref="T:System.Text.RegularExpressions.Regex"/> expression.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.IsMatchFormatter.PlaceholderNameForMatches">
            <summary>
            Gets or sets the name of the placeholder used to output RegEx matching group values.
            <para>
            Example:<br/>
            {value:ismatch(regex):First match in '{}'\\: {m[1]}|No match}<br/>
            "m" is the PlaceholderNameForMatches
            </para>
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.IsMatchFormatter.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.KeyValuePairSource">
            <summary>
            Class to evaluate a <see cref="T:SmartFormat.Core.Parsing.Selector"/> with <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            The key must be <see langword="string"/>, the value must be a <see cref="T:System.Nullable`1"/> <see cref="T:System.Object"/>.
            </summary>
            <example>
            Smart.Format("{key}", new KeyValuePair&lt;string, object?&gt;("key", "a value");
            Result: "a value".
            </example>
        </member>
        <member name="M:SmartFormat.Extensions.KeyValuePairSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.ListFormatter">
            <summary>
            If the source value is an array (or supports ICollection),
            then each item will be custom formatted.
            Syntax:
            #1: "format|spacer"
            #2: "format|spacer|last spacer"
            #3: "format|spacer|last spacer|two spacer"
            The format will be used for each item in the collection, the spacer will be between all items, and the last spacer
            will replace the spacer for the last item only.
            Example:
            CustomFormat("{Dates:D|; |; and }", {#1/1/2000#, #12/31/2999#, #9/9/9999#}) = "January 1, 2000; December 31, 2999;
            and September 9, 9999"
            In this example, format = "D", spacer = "; ", and last spacer = "; and "
            Advanced:
            Composite Formatting is allowed in the format by using nested braces.
            If a nested item is detected, Composite formatting will be used.
            Example:
            CustomFormat("{Sizes:{Width}x{Height}|, }", {new Size(4,3), new Size(16,9)}) = "4x3, 16x9"
            In this example, format = "{Width}x{Height}".  Notice the nested braces.
            </summary>
            <remarks>
            The <see cref="T:SmartFormat.Extensions.ListFormatter"/> PluralLocalizationExtension and ConditionalExtension
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.ListFormatter.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <summary>
            This allows an integer to be used as a selector to index an array (or list).
            This is better described using an example:
            CustomFormat("{Dates.2.Year}", {#1/1/2000#, #12/31/2999#, #9/9/9999#}) = "9999"
            The ".2" selector is used to reference Dates[2].
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.IsThreadSafeMode">
            <summary>
            Gets, whether the <see cref="T:SmartFormat.Extensions.ListFormatter"/> is in thread safe mode.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ListFormatter.CollectionIndex">
            <summary>
            Gets or sets the collection index.
            </summary>
            <remarks>
            In thread safe mode, <see cref="P:SmartFormat.Extensions.ListFormatter.CollectionIndex"/> wraps an <see cref="T:System.Threading.AsyncLocal`1"/>,
            while in single thread mode, a static <see langword="int"/> ist wrapped.
            </remarks>
        </member>
        <member name="M:SmartFormat.Extensions.ListFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Writes the given <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> to the <see cref="T:SmartFormat.Core.Output.IOutput"/>
            if it can be processed by the formatter.
            </summary>
            <param name="formattingInfo">The <see cref="T:SmartFormat.Core.Extensions.IFormattingInfo"/> to process.</param>
            <returns>Returns <see langword="true"/> if processing was possible, else <see langword="false"/>.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.ListFormatter.HasNullableOperator(SmartFormat.Core.Extensions.IFormattingInfo)">
            <summary>
            Checks if any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has nullable <c>?</c> as their first operator.
            </summary>
            <param name="formattingInfo"></param>
            <returns>
            <see langword="true"/>, any of the <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>'s <see cref="P:SmartFormat.Core.Parsing.Placeholder.Selectors"/> has nullable <c>?</c> as their first operator.
            </returns>
            <remarks>
            The nullable operator '?' can be followed by a dot (like '?.') or a square brace (like '?[')
            </remarks>
        </member>
        <member name="M:SmartFormat.Extensions.ListFormatter.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.LocalizationFormatter">
            <summary>
            Localization formatter allows for localizing strings from a language-specific <see cref="T:SmartFormat.Utilities.ILocalizationProvider"/>.
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.LocalizationFormatter.LocalizedFormatCache">
            <summary>
            Storage for localized versions of <see cref="T:SmartFormat.Core.Parsing.Format"/>s
            to avoid repetitive parsing.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.LocalizationFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.LocalizationFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.LocalizationFormatter.CanAutoDetect">
            <inheritdoc/>
            <remarks>
            <see cref="T:SmartFormat.Extensions.LocalizationFormatter"/> never can handle auto-detection.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SmartFormat.Extensions.LocalizationFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="F:SmartFormat.Extensions.LocalizationFormatter.LocalizationProvider">
            <summary>
            The <see cref="T:SmartFormat.Utilities.ILocalizationProvider"/> that resolves strings to localized versions.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.LocalizationFormatter.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.LocalizationFormattingException">
            <summary>
            An exception caused when localization had issues.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.LocalizationFormattingException.#ctor(SmartFormat.Core.Parsing.FormatItem,System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Extensions.LocalizationFormattingException"/>.
            </summary>
            <param name="errorItem">The <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the <see cref="T:System.Exception"/>.</param>
            <param name="formatException">The <see cref="T:System.Exception"/> that was caused by the <see cref="T:SmartFormat.Core.Parsing.FormatItem"/>.</param>
            <param name="index">The index inside the format string, where the error occurred.</param>
        </member>
        <member name="M:SmartFormat.Extensions.LocalizationFormattingException.#ctor(SmartFormat.Core.Parsing.FormatItem,System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Extensions.LocalizationFormattingException"/>.
            </summary>
            <param name="errorItem">The <see cref="T:SmartFormat.Core.Parsing.FormatItem"/> which caused the <see cref="T:System.Exception"/>.</param>
            <param name="issue">The description of the error.</param>
            <param name="index">The index inside the format string, where the error occurred.</param>
        </member>
        <member name="M:SmartFormat.Extensions.LocalizationFormattingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.NullFormatter">
            <summary>
            The class formats <see langword="null"/> values.
            </summary>
            <example>
            Smart.Format("{0:isnull:It's null}", arg)
            Smart.Format("{0:isnull:It's null|Not null}", arg)
            Smart.Format("{0:isnull:It's null|{}}", arg)
            </example>
        </member>
        <member name="P:SmartFormat.Extensions.NullFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.NullFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.NullFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.NullFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.NullFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariablesSource">
            <summary>
            Provides persistent variables of type <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to the <see cref="T:SmartFormat.SmartFormatter"/>
            that do not need to be passed in as arguments when formatting a string.
            <para>The smart string should take the placeholder format like {groupName.variableName}.</para>
            <para>Note: <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariablesGroup"/>s from args to SmartFormatter.Format(...) take precedence over <see cref="T:SmartFormat.Extensions.PersistentVariablesSource"/>.</para>
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariablesSource.NameGroupPair">
            <summary>
            Contains <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s and their name.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.NameGroupPair.#ctor(System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup)">
            <summary>
            CTOR.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.</param>
            <param name="group">The <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.</param>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.NameGroupPair.Name">
            <summary>
            Gets the name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.NameGroupPair.Group">
            <summary>
            Gets the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.PersistentVariablesSource.GroupLookup">
            <summary>
            The container for <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.Count">
            <summary>
            The number of stored variables.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.IsReadOnly">
            <summary>
            Implemented as part of IDictionary. Will always return <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.Keys">
            <summary>
            Gets the names of stored <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.Values">
            <summary>
            Gets the values of stored <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s.
            </summary>
            <remarks>
            Just implemented as part of <see cref="T:System.Collections.IDictionary"/>.
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariablesSource.Item(System.String)">
            <summary>
            Gets the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> that matches the <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to return.</param>
            <returns>The <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> that matches <paramref name="name"/></returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.TryGetValue(System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup@)">
            <summary>
            Returns <see langword="true"/> if a <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> could be found with a matching name, or <see langword="false"/> if one could not.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to find.</param>
            <param name="value">The found <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> or <c>default</c> if one could not be found with a matching name.</param>
            <returns><see langword="true"/> if a group could be found or <see langword="false"/> if one could not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Add(System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup)">
            <summary>
            Add a <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to the source.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to add.</param>
            <param name="group">The <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to add.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Add(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup})">
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariablesSource.Add(System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup)"/>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Remove(System.String)">
            <summary>
            Removes the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> with the matching name.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> to remove.</param>
            <returns><see langword="true"/> if a <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> with a matching name was found and removed, or <see langword="true"/> if one was not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Remove(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup})">
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariablesSource.Remove(System.String)"/>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Clear">
            <summary>
            Removes all <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.ContainsKey(System.String)">
            <summary>
            Returns <see langword="true"/> if a <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> is found with the same name.
            </summary>
            <param name="name">The name of the global variable group to check for.</param>
            <returns><see langword="true"/> if a <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> is found with the same name.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Contains(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup})">
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariablesSource.ContainsKey(System.String)"/>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.CopyTo(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.VariablesGroup}[],System.Int32)">
            <summary>
            Copy all <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s into the provided array starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy the global variables into.</param>
            <param name="arrayIndex">The index to start copying into.</param>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.Clone">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Extensions.PersistentVariablesSource"/>, respecting current <see cref="T:SmartFormat.Core.Settings.SmartSettings"/>,
            with containing variables as a Shallow Copy.
            </summary>
            <returns>
            A new instance of <see cref="T:SmartFormat.Extensions.PersistentVariablesSource"/>, respecting current <see cref="T:SmartFormat.Core.Settings.SmartSettings"/>,
            with containing variables as a Shallow Copy.
            </returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,SmartFormat#Extensions#PersistentVariables#VariablesGroup}}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for all the <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s in the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for all <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>s in the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariablesSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.Variable`1">
            <summary>
            Base class for all single source variables.
            </summary>
            <typeparam name="T">The value type to store in this variable.</typeparam>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.Variable`1.#ctor(`0)">
            <summary>
            Creates a new variable.
            </summary>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.Variable`1.Value">
            <summary>
            The value for the <see cref="T:SmartFormat.Extensions.PersistentVariables.Variable`1"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.Variable`1.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.Variable`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.FloatVariable">
            <summary>
            A <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that holds a single float value.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.FloatVariable.#ctor(System.Nullable{System.Single})">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.StringVariable">
            <summary>
            A <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that holds a single string value.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.StringVariable.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.IntVariable">
            <summary>
            A <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that holds a single integer value.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.IntVariable.#ctor(System.Nullable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.BoolVariable">
            <summary>
            A <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that holds a single boolean value.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.BoolVariable.#ctor(System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.ObjectVariable">
            <summary>
            A <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that holds an <see cref="T:System.Object"/> instance.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.ObjectVariable.#ctor(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.IVariablesGroup">
            <summary>
            Collection that contains <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.IVariablesGroup.TryGetValue(System.String,SmartFormat.Extensions.PersistentVariables.IVariable@)">
            <summary>
            Gets the variable with the matching key if one exists.
            </summary>
            <param name="name">The variable name to match.</param>
            <param name="value">The found variable or <c>null</c> if one could not be found.</param>
            <returns><see langword="true"/> if a variable could be found or <see langword="false"/> if one could not.</returns>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.IVariable">
            <summary>
            Represents a variable that can be provided through a global <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>
            instead of as a <c>SmartFormat</c> argument.
            A variable can be a single variable, in which case the value should be returned by <see cref="M:SmartFormat.Extensions.PersistentVariables.IVariable.GetValue"/>
            or a class with multiple variables (<see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>) which can then be further extracted as <c>SmartFormat</c> arguments.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.IVariable.GetValue">
            <summary>
            Gets the <see cref="P:SmartFormat.Extensions.PersistentVariables.Variable`1.Value"/> boxed into a <see cref="T:System.Nullable"/> <see cref="T:System.Object"/>.
            </summary>
            <returns>The <see cref="P:SmartFormat.Extensions.PersistentVariables.Variable`1.Value"/> boxed into a <see cref="T:System.Nullable"/> <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.NameVariablePair">
            <summary>
            The class for the variable name and its corresponding <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.NameVariablePair.#ctor(System.String,SmartFormat.Extensions.PersistentVariables.IVariable)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="variable">The <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>.</param>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.NameVariablePair.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.NameVariablePair.Variable">
            <summary>
            Gets the <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> that corresponds to the variable name.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.NameVariablePair.ToString">
            <summary>
            Gets a string with the <see cref="P:SmartFormat.Extensions.PersistentVariables.NameVariablePair.Name"/>, <see cref="T:System.Type"/> and the value from <see cref="M:SmartFormat.Extensions.PersistentVariables.IVariable.GetValue"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup">
            <summary>
            A collection of <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>s that can be used
            as arguments to the Format(...) overloads of <see cref="T:SmartFormat.SmartFormatter"/>,
            or it can be added to a <seealso cref="T:SmartFormat.Extensions.PersistentVariablesSource"/> or a <seealso cref="P:SmartFormat.Extensions.GlobalVariablesSource.Instance"/>
            <br/>
            Each instance of <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> keeps its own collection.
            <para>
            One instance of <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/> can be used from different threads,
            if <see cref="P:SmartFormat.Core.Settings.SmartSettings.IsThreadSafeMode"/> is <see langword="true"/> when creating the instance.
            </para>
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Count">
            <inheritdoc/>
            <summary>
            Gets the number of <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>s in the group.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing all the variable names.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Values">
            <summary>
            Gets all the <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>s for this group.
            </summary>
            <remarks>
            Just implemented as part of <see cref="T:System.Collections.IDictionary"/>.
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.VariablesGroup.IsReadOnly">
            <summary>
            Always returns <see langword="false"/>.
            </summary>
            <remarks>
            Just implemented as part of <see cref="T:System.Collections.IDictionary"/>.
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/>.</param>
            <returns>The found variable.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if a variable with the specified name does not exist.</exception>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.GetValue">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.TryGetValue(System.String,SmartFormat.Extensions.PersistentVariables.IVariable@)">
            <summary>
            Gets the <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> with the specified name from this <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The variable that was found or <c>default</c>.</param>
            <returns><see langword="true"/> if a variable was found and <see langword="false"/> if one could not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Add(System.String,SmartFormat.Extensions.PersistentVariables.IVariable)">
            <summary>
            Adds a new <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> to the group.
            </summary>
            <param name="name">The name of the variable, must be unique and must only contain selector characters which are also accepted by the <see cref="T:SmartFormat.Core.Parsing.Parser"/>.</param>
            <param name="variable">The variable to use when formatting. See also <seealso cref="T:SmartFormat.Extensions.PersistentVariables.BoolVariable"/>, <seealso cref="T:SmartFormat.Extensions.PersistentVariables.FloatVariable"/>, <seealso cref="T:SmartFormat.Extensions.PersistentVariables.IntVariable"/>, <seealso cref="T:SmartFormat.Extensions.PersistentVariables.StringVariable"/>, <seealso cref="T:SmartFormat.Extensions.PersistentVariables.ObjectVariable"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Add(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.IVariable})">
            <summary>
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Add(System.String,SmartFormat.Extensions.PersistentVariables.IVariable)"/>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Remove(System.String)">
            <summary>
            Removes an <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> with the specified name.
            </summary>
            <param name="name"></param>
            <returns><see langword="true"/> if a variable with the specified name was removed, <see langword="false"/> if one was not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Remove(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.IVariable})">
            <summary>
            Removes an <see cref="T:SmartFormat.Extensions.PersistentVariables.IVariable"/> with the specified key.
            </summary>
            <param name="item">The item to be removed. Only the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> field will be considered.</param>
            <returns><see langword="true"/> if a variable with the specified name was removed, <see langword="false"/> if one was not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.ContainsKey(System.String)">
            <summary>
            Returns <see langword="true"/> if a variable with the specified name exists.
            </summary>
            <param name="name">The variable name to check for.</param>
            <returns><see langword="true"/> if a matching variable could be found or <see langword="false"/> if one could not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Contains(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.IVariable})">
            <summary>
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.ContainsKey(System.String)"/>
            </summary>
            <param name="item">The item to check for. Both the Key and Value must match.</param>
            <returns><see langword="true"/> if a matching variable could be found or <see langword="false"/> if one could not.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.CopyTo(System.Collections.Generic.KeyValuePair{System.String,SmartFormat.Extensions.PersistentVariables.IVariable}[],System.Int32)">
            <summary>
            Copies the variables into an array starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">The array to copy the variables into.</param>
            <param name="arrayIndex">The index to start copying the items into.</param>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Clone">
            <summary>
            Creates a Shallow Copy of this <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.
            </summary>
            <returns>A Shallow Copy of this <see cref="T:SmartFormat.Extensions.PersistentVariables.VariablesGroup"/>.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,SmartFormat#Extensions#PersistentVariables#IVariable}}#GetEnumerator">
            <summary>
            <inheritdoc cref="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.GetEnumerator"/>
            </summary>
            <returns>The enumerator that can be used to iterate through all the variables.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.GetEnumerator">
            <summary>
            Returns an enumerator for all variables in this group.
            </summary>
            <returns>The enumerator that can be used to iterate through all the variables.</returns>
        </member>
        <member name="M:SmartFormat.Extensions.PersistentVariables.VariablesGroup.Clear">
            <summary>
            Removes all variables in the group.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.PluralLocalizationFormatter">
            <summary>
            A class to format following culture specific pluralization rules.
            The range of values the formatter can process is from <see cref="F:System.Decimal.MinValue"/> to <see cref="F:System.Decimal.MaxValue"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PluralLocalizationFormatter.#ctor">
            <summary>
            CTOR for the plugin with rules for many common languages.
            </summary>
            <remarks>
            Language Plural Rules are described at
            https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html
            </remarks>
        </member>
        <member name="M:SmartFormat.Extensions.PluralLocalizationFormatter.#ctor(System.String)">
            <summary>
            Initializes the plugin with rules for many common languages.
            </summary>
            <remarks>
            Culture is now determined in this sequence:<br/>
            1. Get the culture from the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.FormatterOptions"/>.<br/>
            2. Get the culture from the <see cref="T:System.IFormatProvider"/> argument (which may be a <see cref="T:System.Globalization.CultureInfo"/>) to <see cref="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,System.String,System.Object[])"/><br/>
            3. The <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>.<br/>
            Language Plural Rules are described at
            https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PluralLocalizationFormatter.DefaultTwoLetterISOLanguageName">
            <summary>
            Gets or sets the two letter ISO language name.
            </summary>
            <remarks>
            Culture is now determined in this sequence:<br/>
            1. Get the culture from the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.FormatterOptions"/>.<br/>
            2. Get the culture from the <see cref="T:System.IFormatProvider"/> argument (which may be a <see cref="T:System.Globalization.CultureInfo"/>) to <see cref="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,System.String,System.Object[])"/><br/>
            3. The <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>.<br/>
            Language Plural Rules are described at
            https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PluralLocalizationFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.PluralLocalizationFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.PluralLocalizationFormatter.CanAutoDetect">
            <summary>
            Any extensions marked as <see cref="P:SmartFormat.Extensions.PluralLocalizationFormatter.CanAutoDetect"/> will be called implicitly
            (when no formatter name is specified in the input format string).
            For example, "{0:N2}" will implicitly call extensions marked as <see cref="P:SmartFormat.Extensions.PluralLocalizationFormatter.CanAutoDetect"/>.
            Implicit formatter invocations should not throw exceptions.
            With <see cref="P:SmartFormat.Extensions.PluralLocalizationFormatter.CanAutoDetect"/> == <see langword="false"/>, the formatter can only be
            called by its name in the input format string.
            <para/>
            <b>Auto detection only works with more than 1 format argument.
            It is recommended to set <see cref="P:SmartFormat.Extensions.PluralLocalizationFormatter.CanAutoDetect"/> to <see langword="false"/>. This will be the default in a future version.
            </b>
            </summary>
            <remarks>
            If more than one registered <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> can auto-detect, the first one in the formatter list will win.
            </remarks>
        </member>
        <member name="P:SmartFormat.Extensions.PluralLocalizationFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.PluralLocalizationFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.ReflectionSource">
            <summary>
            Class to evaluate any <see cref="T:System.Object"/> using <see cref="N:System.Reflection"/>.
            A type cache is used in order to reduce reflection calls.
            Include this source, if any of these types shall be used.
            <para/>
            For <see cref="P:SmartFormat.Core.Settings.SmartSettings.CaseSensitivity"/>==<see cref="F:SmartFormat.Core.Settings.CaseSensitivityType.CaseInsensitive"/>,
            when there are multiple members with the same name but different case, the first member is used.
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.ReflectionSource.DefaultCacheSize">
            <summary>
            The default cache size.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ReflectionSource.MaxCacheSize">
            <summary>
            Gets or sets the maximum cache size. Default is <see cref="F:SmartFormat.Extensions.ReflectionSource.DefaultCacheSize"/>.
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.ReflectionSource.TypeCache">
            <summary>
            Gets the type cache <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            It could e.g. be pre-filled or cleared in a derived class.
            <para/>
            We use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the key,
            because case-sensitivity is handled in method <see cref="M:SmartFormat.Extensions.ReflectionSource.EvaluateMembers(SmartFormat.Core.Extensions.ISelectorInfo,System.String,System.Object,System.Type)"/>.
            </summary>
            <remarks>
            For reading, <see cref="T:System.Collections.Generic.Dictionary`2"/> and <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> perform equally.
            For writing, <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> is slower with more garbage (tested under net5.0).
            </remarks>
        </member>
        <member name="F:SmartFormat.Extensions.ReflectionSource.KeyList">
            <summary>
            Keeps track of the insertion order into the <see cref="F:SmartFormat.Extensions.ReflectionSource.TypeCache"/>.
            This is needed before NETCore3.1, where the dictionary is not ordered by insertion order.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.ReflectionSource.IsTypeCacheEnabled">
            <summary>
            Gets or sets, whether the type cache dictionary should be used.
            Enable the cache for significantly better performance.
            Default is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.ReflectionSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.ReflectionSource.AddToCache(System.Type,System.String,System.Reflection.FieldInfo,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Adds an item to the type cache, and removes the oldest item
            if the new cache size would exceed <see cref="P:SmartFormat.Extensions.ReflectionSource.MaxCacheSize"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.StringSource">
            <summary>
            Class to evaluate a <see cref="T:SmartFormat.Core.Parsing.Selector"/> with a <see langword="string"/> as <see cref="P:SmartFormat.Core.Extensions.ISelectorInfo.CurrentValue"/>.
            Include this source for handling <see langword="string"/>s and its extension methods.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.StringSource.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.StringSource.SelectorMethods">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> of methods that can be used as selectors.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.StringSource.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.StringSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.StringSource.CapitalizeWords(SmartFormat.Core.Extensions.ISelectorInfo,System.String)">
            <summary>
            Converts the first character of each word to an uppercase character.
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.SubStringFormatter">
            <summary>
            Formatter lets you output part of an input string. 
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.CanAutoDetect">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.SplitChar">
            <summary>
            Gets or sets the character used to split the option text literals.
            Valid characters are: | (pipe) , (comma)  ~ (tilde)
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.NullDisplayString">
            <summary>
            Get or set the string to display for NULL values, defaults to <see cref="F:System.String.Empty"/>.
            <para>
            It will <b>not</b> be used, if a format option is provided to the formatter.
            In this case, the child formatter must handle the NULL result.
            </para>
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.SubStringFormatter.OutOfRangeBehavior">
            <summary>
            Get or set the behavior when start index and/or length are too big, defaults to <see cref="F:SmartFormat.Extensions.SubStringFormatter.SubStringOutOfRangeBehavior.ReturnEmptyString"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.SubStringFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.SubStringFormatter.SubStringOutOfRangeBehavior">
            <summary>
            Specify behavior when start index and/or length is out of range
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.SubStringFormatter.SubStringOutOfRangeBehavior.ReturnEmptyString">
            <summary>
            Returns string.Empty
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.SubStringFormatter.SubStringOutOfRangeBehavior.ReturnStartIndexToEndOfString">
            <summary>
            Returns the remainder of the string, starting at StartIndex
            </summary>
        </member>
        <member name="F:SmartFormat.Extensions.SubStringFormatter.SubStringOutOfRangeBehavior.ThrowException">
            <summary>
            Throws <see cref="T:SmartFormat.Core.Formatting.FormattingException"/> 
            </summary>
        </member>
        <member name="T:SmartFormat.Extensions.TemplateFormatter">
            <summary>
            Template Formatter allows for registering reusable templates, and use them by name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.TemplateFormatter.Names">
            <summary>
            Obsolete. <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s only have one unique name.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.TemplateFormatter.Name">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Extensions.TemplateFormatter.CanAutoDetect">
            <inheritdoc/>
            <remarks>
            <see cref="T:SmartFormat.Extensions.TemplateFormatter"/> never can handle auto-detection.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SmartFormat.Extensions.TemplateFormatter.TryEvaluateFormat(SmartFormat.Core.Extensions.IFormattingInfo)">
            <inheritdoc />
        </member>
        <member name="M:SmartFormat.Extensions.TemplateFormatter.Register(System.String,System.String)">
            <summary>
            Register a new template.
            </summary>
            <param name="templateName">A name for the template, which is not already registered.</param>
            <param name="template">The string to be used as a template.</param>
        </member>
        <member name="M:SmartFormat.Extensions.TemplateFormatter.Remove(System.String)">
            <summary>
            Remove a template by its name.
            </summary>
            <param name="templateName"></param>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Extensions.TemplateFormatter.Clear">
            <summary>
            Remove all templates.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.TemplateFormatter.Initialize(SmartFormat.SmartFormatter)">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Extensions.ValueTupleSource">
            <summary>
            Class to evaluate <see cref="T:System.ValueTuple`1"/>s.
            With ValueTuples
            a) all objects used for Smart.Format can be collected in one place as the first argument
            b) the format string can be written like each object would be the first argument of Smart.Format
            c) there is no need to bother from which argument a value should come from
            Include this source, if this type shall be used.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.ValueTupleSource.TryEvaluateSelector(SmartFormat.Core.Extensions.ISelectorInfo)">
            <inheritdoc />
        </member>
        <member name="T:SmartFormat.Extensions.WellKnownExtensionTypes">
            <summary>
            Helper class for dealing with well-known <see cref="T:SmartFormat.Core.Extensions.ISource"/> and <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.WellKnownExtensionTypes.Sources">
            <summary>
            Well-known <see cref="T:SmartFormat.Core.Extensions.ISource"/> implementations in the sequence how they should (not must!) be invoked.
            </summary>
        </member>
        <member name="P:SmartFormat.Extensions.WellKnownExtensionTypes.Formatters">
            <summary>
            Well-known <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> implementations in the sequence how they should (not must!) be invoked.
            </summary>
        </member>
        <member name="M:SmartFormat.Extensions.WellKnownExtensionTypes.GetIndexToInsert``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Determines where a new extension should be inserted in the
            list of existing extensions.
            </summary>
            <typeparam name="T">A type implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> or <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>.</typeparam>
            <param name="currentExtensions"></param>
            <param name="extensionToInsert"></param>
            <returns></returns>
        </member>
        <member name="M:SmartFormat.Extensions.WellKnownExtensionTypes.GetReferencedExtensions``1">
            <summary>
            Gets all referenced transient and singleton <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> and <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions.
            </summary>
            <typeparam name="T"><see cref="T:SmartFormat.Core.Extensions.IFormatter"/> or <see cref="T:SmartFormat.Core.Extensions.ISource"/>.</typeparam>
            <returns>A <see cref="T:System.ValueTuple"/> with <see cref="T:System.Type"/> <see cref="T:System.Collections.Generic.HashSet`1"/>s all extensions and a flag, if an extension is a singleton.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SmartFormat.Extensions.WellKnownExtensionTypes.FetchReferencedExtensions``1(System.Reflection.Assembly)">
            <summary>
            Fetches transient and singleton <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> and <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions from assemblies.
            Core SmartFormat and referenced extension assemblies are included in the search.
            </summary>
            <param name="callingAssembly">The assembly which originally invoked this method.</param>
            <typeparam name="T"><see cref="T:SmartFormat.Core.Extensions.IFormatter"/> or <see cref="T:SmartFormat.Core.Extensions.ISource"/>.</typeparam>
            <returns>A <see cref="T:System.ValueTuple"/> with <see cref="T:System.Type"/> <see cref="T:System.Collections.Generic.HashSet`1"/>s all extensions and a flag, if an extension is a singleton.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:SmartFormat.Extensions.WellKnownExtensionTypes.CreateInstanceForType``1(System.ValueTuple{System.Type,System.Boolean})">
            <summary>
            Creates an instance of the given type.
            </summary>
            <typeparam name="T"><see cref="T:SmartFormat.Core.Extensions.IFormatter"/> or <see cref="T:SmartFormat.Core.Extensions.ISource"/>.</typeparam>
            <param name="wellKnown">A <see cref="T:System.ValueTuple"/> containing <see cref="T:System.Type"/> and <see langword="bool"/>.</param>
            <returns>An instance of the given type.</returns>
        </member>
        <member name="T:SmartFormat.FormattingErrorEventArgs">
            <summary>
            Supplies information about formatting errors.
            </summary>
        </member>
        <member name="P:SmartFormat.FormattingErrorEventArgs.Placeholder">
            <summary>
            Placeholder which caused an error.
            </summary>
        </member>
        <member name="P:SmartFormat.FormattingErrorEventArgs.ErrorIndex">
            <summary>
            Location where the error occurred.
            </summary>
        </member>
        <member name="P:SmartFormat.FormattingErrorEventArgs.IgnoreError">
            <summary>
            Information whether error will throw an exception.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.IObjectPool`1.PoolItems">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of the unused items in the object pool.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.IObjectPool`1.Get">
            <summary>
            Get an object from the pool.
            </summary>
            <returns>
            An initialized object from the pool.
            </returns>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.IObjectPool`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> which can be used to
            return the instance back to the pool when the <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/>
            </returns>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.IObjectPool`1.Return(`0)">
            <summary>
            Returns an object to the pool.
            </summary>
            <param name="element">Object to return to the pool.</param>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.IObjectPool`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.IPoolCounters.CountAll">
            <summary>
            The total number of active and inactive objects.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.IPoolCounters.CountActive">
            <summary>
            Number of objects that have been created by the pool but are currently in use and have not yet been returned.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.IPoolCounters.CountInactive">
            <summary>
            Number of objects that are currently available in the pool.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.LinkedPool`1">
            <summary>
            Generic linked object pool implementation optimized for single thread use cases.
            It uses a linked list of pool items instead of a collection, and is not thread-safe.
            </summary>
            <typeparam name="T"><see langword="type"/> of the object pool elements.</typeparam>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.LinkedPool`1.#ctor(SmartFormat.Pooling.ObjectPools.PoolPolicy{`0})">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.LinkedPool`1.IsThreadSafeMode">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.LinkedPool`1.CountAll">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.LinkedPool`1.PoolItems">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.LinkedPool`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.LinkedPool`1.Return(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.LinkedPool`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.ObjectPool`1">
            <summary>
            The abstract base class for object pool implementations.
            </summary>
            <typeparam name="T"><see langword="type"/> of the object pool elements.</typeparam>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.#ctor(SmartFormat.Pooling.ObjectPools.PoolPolicy{`0})">
            <summary>
            Creates a new object pool.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.IsThreadSafeMode">
            <summary>
            Gets whether the underlying object pool is thread safe.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.IsPoolingEnabled">
            <summary>
            Indicates whether object pooling is enabled (<see langword="true"/>).
            <para>Set or gets <see cref="P:SmartFormat.Core.Settings.PoolSettings.IsPoolingEnabled"/></para>
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.PoolPolicy">
            <summary>
            The configuration of how an <see cref="T:SmartFormat.Pooling.ObjectPools.IObjectPool`1"/> works.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountAll">
            <summary>
            The total number of active and inactive objects.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.PoolItems">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of the unused items in the object pool.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountActive">
            <summary>
            Number of objects that have been created by the pool but are currently in use and have not yet been returned.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountInactive">
            <summary>
            Number of objects that are currently available in the pool.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Get">
            <summary>
            Get an object from the pool.
            </summary>
            <returns>
            An initialized object from the pool.
            </returns>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> which can be used to
            return the instance back to the pool when the <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/>
            </returns>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Return(`0)">
            <summary>
            Returns an object to the pool.
            </summary>
            <param name="element">Object to return to the pool.</param>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            <see cref="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountAll"/>, <see cref="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountActive"/> and <see cref="P:SmartFormat.Pooling.ObjectPools.ObjectPool`1.CountInactive"/> are set to zero.
            </summary>
            <remarks>
            The method should be called from <see cref="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Dispose(System.Boolean)">
            <summary>
            Disposes the resources by calling the <see cref="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Clear"/> method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPool`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1">
            <summary>
            Generic, thread-safe object pool implementation.
            </summary>
            <typeparam name="T"><see langword="type"/> of the object pool elements.</typeparam>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.#ctor(SmartFormat.Pooling.ObjectPools.PoolPolicy{`0})">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.IsThreadSafeMode">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.CountAll">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.PoolItems">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.CountInactive">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.Return(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolConcurrent`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1">
            <summary>
            Generic object pool implementation optimized for single thread use cases.
            It is not thread-safe, has better performance compared to synchronized implementations.
            </summary>
            <typeparam name="T"><see langword="type"/> of the object pool elements.</typeparam>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.#ctor(SmartFormat.Pooling.ObjectPools.PoolPolicy{`0})">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.IsThreadSafeMode">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.CountAll">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.PoolItems">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.CountInactive">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.Get">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.Return(`0)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.Pooling.ObjectPools.ObjectPoolSingleThread`1.Clear">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.PooledObject`1">
            <summary>
            A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> wraps a reference to an instance that will be returned
            to the pool when the <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> is disposed.
            The purpose is to automate the return of references so that they do not need to be returned manually.
            <example>
            <para>A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> can be used like so:</para>
            <code>
            MyClass myInstance;
            using(myPool.Get(out myInstance)) // When leaving the scope myInstance will be returned to the pool.
            {
                // Do something with myInstance
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.ObjectPools.PoolPolicy`1">
            <summary>
            Defines the configuration of how an <see cref="T:SmartFormat.Pooling.ObjectPools.IObjectPool`1"/> works.
            </summary>
            <typeparam name="T">The type of item being pooled.</typeparam>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.MaximumPoolSize">
            <summary>
            Determines the maximum number of items allowed in the pool, which must not be zero.
            </summary>
            <remarks>
            <para>This restricts the number of instances stored in the pool at any given time.
            It does not represent the maximum number of items that may be generated or exist in memory at any given time.
            If the pool is empty and a new item is requested, a new instance will be created,
            even if pool was previously full and all it's instances have been taken already.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.InitialPoolSize">
            <summary>
            The initial capacity the item store will be created with. May not be used in <see cref="T:SmartFormat.Pooling.ObjectPools.IObjectPool`1"/> implementations.
            Default is 10.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.FunctionOnCreate">
            <summary>
            A function that returns a new item for the pool. Used when the pool is empty and a new item is requested.
            </summary>
            <remarks>
            <para>Should return a new, clean item, ready for use by the caller. Takes a single argument being a reference to the pool that was asked for the object, useful if you're creating <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> instances.</para>
            <para>May not be <see langword="null"/>. If <see langword="null"/> when provided to an <see cref="T:SmartFormat.Pooling.ObjectPools.IObjectPool`1"/> instance, an <see cref="T:System.ArgumentNullException"/> will be thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnDestroy">
            <summary>
            Called when the element cannot be returned to the pool because this would exceed the maximal pool size.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnGet">
            <summary>
            Called when an item is being taken from the pool.
            Should return an initialized, clean item, ready for use by the caller.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn">
            <summary>
            Called when an item is being returned to the pool.
            This could be used to clean up or disable the instance.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.PoolingException">
            <summary>
            Represents an <i>Exception</i> thrown by the pooling subsystem.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.PoolingException.#ctor(System.String,System.Type)">
            <summary>
            Creates a instance of a <see cref="T:SmartFormat.Pooling.PoolingException"/>.
            </summary>
            <param name="message"></param>
            <param name="poolType"></param>
        </member>
        <member name="M:SmartFormat.Pooling.PoolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.PoolingException.PoolType">
            <summary>
            Gets the type of pool, which threw the exception.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.PoolRegistry">
            <summary>
            Registry for all object pools.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.PoolRegistry.GetOrAdd``1(``0)">
            <summary>
            Gets the instance of the pool that already exists in the registry,
            or adds new pool to the registry and returns it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool"></param>
            <returns>The instance of the pool that already exists, or that was newly added.</returns>
        </member>
        <member name="M:SmartFormat.Pooling.PoolRegistry.TryRemove``1(``0)">
            <summary>
            Tries to remove the pool from the registry.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool"></param>
        </member>
        <member name="M:SmartFormat.Pooling.PoolRegistry.Get``1">
            <summary>
            Gets the pool of type <typeparamref name="T"/> from the registry, or <see langword="null"/> if not found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The pool of type <typeparamref name="T"/> from the registry, or <see langword="null"/> if not found.</returns>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.FormatDetailsPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Formatting.FormatDetails"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormatDetailsPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormatDetailsPool.Return(SmartFormat.Core.Formatting.FormatDetails)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.FormatDetailsPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.FormatPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormatPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormatPool.Return(SmartFormat.Core.Parsing.Format)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.FormatPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.FormattingInfoPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormattingInfoPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.FormattingInfoPool.Return(SmartFormat.Core.Formatting.FormattingInfo)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.FormattingInfoPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.InitializationObject">
            <summary>
            The class contains static instances of classes which can be used to Clear()
            pooled Smart objects (which are not <see cref="T:System.Nullable`1"/>).
            <para>
            If an instance already contains or is an <see cref="T:SmartFormat.Pooling.SmartPools.InitializationObject"/>, it should
            not be returned to the pool.
            </para>
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.ObjectList">
            <summary>
            A static <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.IntegerList">
            <summary>
            A static <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.SmartSettings">
            <summary>
            A static <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.SmartFormatter">
            <summary>
            A static <see cref="T:SmartFormat.SmartFormatter"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.Format">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.LiteralText">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.LiteralText"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.Placeholder">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.Placeholder"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.Selector">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.Selector"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.Output">
            <summary>
            A static <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.FormatDetails">
            <summary>
            A static <see cref="T:SmartFormat.Core.Formatting.FormatDetails"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.FormattingInfo">
            <summary>
            A static <see cref="T:SmartFormat.Core.Formatting.FormatDetails"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.ParsingErrors">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.ParsingErrors"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SmartPools.InitializationObject.SplitList">
            <summary>
            A static <see cref="T:SmartFormat.Core.Parsing.SplitList"/> instance.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.LiteralTextPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.LiteralText"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.LiteralTextPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.LiteralTextPool.Return(SmartFormat.Core.Parsing.LiteralText)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.LiteralTextPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.ParsingErrorsPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.ParsingErrors"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.ParsingErrorsPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.ParsingErrorsPool.Return(SmartFormat.Core.Parsing.ParsingErrors)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.ParsingErrorsPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.PlaceholderPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.PlaceholderPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.PlaceholderPool.Return(SmartFormat.Core.Parsing.Placeholder)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.PlaceholderPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.SelectorPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.Selector"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SelectorPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SelectorPool.Return(SmartFormat.Core.Parsing.Selector)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.SelectorPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.SmartPoolAbstract`1">
            <summary>
            The abstract base class for smart pools.
            </summary>
            <typeparam name="T">The <see langword="type"/> of the smart pool.</typeparam>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SmartPoolAbstract`1.Get">
            <summary>
            Gets a not yet initialized <see typeparamref ="T"/> instance from the object pool.
            </summary>
            <returns>A not yet initialized <see typeparamref ="T"/> instance from the object pool.</returns>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SmartPoolAbstract`1.Get(`0@)">
            <summary>
            Gets a <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> with a not yet initialized <see paramref="T"/> instance from the object pool.
            </summary>
            <returns>A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> with a not yet initialized <see paramref="T"/> instance from the object pool.</returns>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.SplitListPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Parsing.SplitList"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SplitListPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.SplitListPool.Return(SmartFormat.Core.Parsing.SplitList)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.SplitListPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SmartPools.StringOutputPool">
            <summary>
            The object pool for <see cref="T:SmartFormat.Core.Output.StringOutput"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SmartPools.StringOutputPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SmartPools.StringOutputPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.CollectionPool`2">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.ICollection`1"/>s.
            </summary>
            <typeparam name="TCollection"></typeparam> name=""/>
            <typeparam name="TItem"></typeparam> name=""/>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.CollectionPool`2.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.CollectionPool`2.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.DictionaryPool`2">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.IDictionary`2"/>s.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.DictionaryPool`2.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.DictionaryPool`2.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.HashSetPool`1">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.HashSet`1"/>s.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.HashSetPool`1.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.HashSetPool`1.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.ListPool`1">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.ListPool`1.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.ListPool`1.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1">
            <summary>
            The abstract base class for specialized pools.
            </summary>
            <typeparam name="T">The <see langword="type"/> of the smart pool.</typeparam>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Pool">
            <summary>
            The static <see cref="T:SmartFormat.Pooling.ObjectPools.ObjectPool`1"/> instance.
            </summary>
        </member>
        <member name="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy">
            <summary>
            The policy for the pool. Policy must be defined before initializing the pool.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.#ctor">
            <summary>
            CTOR.
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.IsThreadSafeMode">
            <summary>
            Gets whether the pool is running in thread-safe mode.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Reset(System.Nullable{System.Boolean})">
            <summary>
            Disposes the current instance of the <see cref="T:SmartFormat.Pooling.ObjectPools.ObjectPool`1"/> and
            creates a new one, applying the current <see cref="T:SmartFormat.Core.Settings.PoolSettings"/> and <see cref="T:SmartFormat.Pooling.ObjectPools.PoolPolicy`1"/>.
            </summary>
            <param name="isThreadSafeMode">If <see langword="null"/>, the <see cref="P:SmartFormat.Core.Settings.SmartSettings.IsThreadSafeMode"/> will be used.</param>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Get">
            <summary>
            Gets a <see typeparamref="T"/> instance from the object pool.
            </summary>
            <returns>A <see typeparamref="T"/> instance from the object pool.</returns>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> which can be used to
            return the instance back to the pool when the <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:SmartFormat.Pooling.ObjectPools.PooledObject`1"/>
            </returns>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Return(`0)">
            <summary>
            The default method to return an instance to the pool.
            The method can be overriden in a derived class.
            </summary>
            <param name="toReturn"></param>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Dispose(System.Boolean)">
            <summary>
            Disposes the resources by calling the <see cref="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Clear"/> method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SmartFormat.Pooling.SpecializedPools.StringBuilderPool">
            <summary>
            The object pool for <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.Pooling.SpecializedPools.StringBuilderPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:SmartFormat.Pooling.SpecializedPools.SpecializedPoolAbstract`1.Policy"/> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.StringBuilderPool.DefaultStringBuilderCapacity">
            <summary>
            Gets or sets the <see cref="P:System.Text.StringBuilder.Capacity"/>, that is used
            when creating new instances, or when returning an instance to the pool.
            <para>The default capacity is 1024.</para>
            </summary>
        </member>
        <member name="P:SmartFormat.Pooling.SpecializedPools.StringBuilderPool.Instance">
            <summary>
            Gets the existing instance of the pool or lazy-creates a new one, which is then added to the registry.
            </summary>
        </member>
        <member name="T:SmartFormat.Smart">
            <summary>
            This class holds a <see cref="P:SmartFormat.Smart.Default"/> instance of a <see cref="T:SmartFormat.SmartFormatter"/>.
            The default instance has all extensions registered.
            <para>For optimized performance, create a <see cref="T:SmartFormat.SmartFormatter"/> instance and register the
            particular extensions that are needed.</para>
            <para><see cref="T:SmartFormat.Smart"/> methods are not thread safe.</para>
            </summary>
        </member>
        <member name="M:SmartFormat.Smart.Format(System.String,System.Object[])">
            <summary>
            Replaces the format items in the specified format string with the string representation or the corresponding object.
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <remarks>Use <see cref="P:SmartFormat.Smart.Default"/> or <see cref="T:SmartFormat.SmartFormatter"/> for more <i>Format(...)</i> overloads.</remarks>
            <returns>The format items in the specified format string replaced with the string representation or the corresponding object.</returns>
        </member>
        <member name="M:SmartFormat.Smart.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces the format items in the specified format string with the string representation or the corresponding object.
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
            <remarks>Use <see cref="P:SmartFormat.Smart.Default"/> or <see cref="T:SmartFormat.SmartFormatter"/> for more <i>Format(...)</i> overloads.</remarks>
            <returns>The format items in the specified format string replaced with the string representation or the corresponding object.</returns>
        </member>
        <member name="M:SmartFormat.Smart.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in the specified format string with the string representation or the corresponding object.
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <remarks>Use <see cref="P:SmartFormat.Smart.Default"/> or <see cref="T:SmartFormat.SmartFormatter"/> for more <i>Format(...)</i> overloads.</remarks>
            <returns>The format items in the specified format string replaced with the string representation or the corresponding object.</returns>
        </member>
        <member name="M:SmartFormat.Smart.Format(System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in the specified format string with the string representation or the corresponding object.
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <remarks>Use <see cref="P:SmartFormat.Smart.Default"/> or <see cref="T:SmartFormat.SmartFormatter"/> for more <i>Format(...)</i> overloads.</remarks>
            <returns>The format items in the specified format string replaced with the string representation or the corresponding object.</returns>
        </member>
        <member name="M:SmartFormat.Smart.Format(System.String,System.Object)">
            <summary>
            Formats 
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <remarks>Use <see cref="P:SmartFormat.Smart.Default"/> or <see cref="T:SmartFormat.SmartFormatter"/> for more <i>Format(...)</i> overloads.</remarks>
            <returns></returns>
        </member>
        <member name="P:SmartFormat.Smart.Default">
            <summary>
            Gets or sets the default <see cref="T:SmartFormat.SmartFormatter"/>.
            If not set, the <see cref="M:SmartFormat.Smart.CreateDefaultSmartFormat(SmartFormat.Core.Settings.SmartSettings)"/> will be used.
            <para>
            Using the <see cref="T:System.ThreadStaticAttribute"/>, <see cref="P:SmartFormat.Smart.Default"/> returns isolated instances of the <see cref="T:SmartFormat.SmartFormatter"/> in each thread.
            </para>
            <para>
            It is recommended to set the thread-<see langword="static"/>
            <see cref="P:SmartFormat.Smart.Default"/> <see cref="T:SmartFormat.SmartFormatter"/> with the extensions that are actually needed.
            As <see cref="P:SmartFormat.Smart.Default"/> is thread-static, this must be done on each thread.
            </para>
            </summary>
        </member>
        <member name="M:SmartFormat.Smart.CreateDefaultSmartFormat(SmartFormat.Core.Settings.SmartSettings)">
            <summary>
            Creates a new <see cref="T:SmartFormat.SmartFormatter"/> instance with core extensions registered.
            For optimized performance, create a <see cref="T:SmartFormat.SmartFormatter"/> instance and register the
            particular extensions that are really needed.
            <para>
            See <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Formatters"/> and <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Sources"/>
            for a complete list of well-known types.
            </para>
            </summary>
            <param name="settings">The <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> to use, or <see langword="null"/> for default settings.</param>
            <returns>A <see cref="T:SmartFormat.SmartFormatter"/> with core extensions registered:
            <para>
            <see cref="T:SmartFormat.Core.Extensions.ISource"/>s:
            <see cref="T:SmartFormat.Extensions.StringSource"/>, <see cref="T:SmartFormat.Extensions.ListFormatter"/>, <see cref="T:SmartFormat.Extensions.DictionarySource"/>,
            <see cref="T:SmartFormat.Extensions.ValueTupleSource"/>, <see cref="T:SmartFormat.Extensions.ReflectionSource"/>, <see cref="T:SmartFormat.Extensions.DefaultSource"/>, <see cref="T:SmartFormat.Extensions.KeyValuePairSource"/>
            </para>
            <para>
            <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>s:
            <see cref="T:SmartFormat.Extensions.ListFormatter"/>, <see cref="T:SmartFormat.Extensions.PluralLocalizationFormatter"/>,
            <see cref="T:SmartFormat.Extensions.ConditionalFormatter"/>, <see cref="T:SmartFormat.Extensions.IsMatchFormatter"/>, <see cref="T:SmartFormat.Extensions.NullFormatter"/>,
            <see cref="T:SmartFormat.Extensions.ChooseFormatter"/>, <see cref="T:SmartFormat.Extensions.SubStringFormatter"/>, <see cref="T:SmartFormat.Extensions.DefaultFormatter"/>.
            </para>
            </returns>
        </member>
        <member name="T:SmartFormat.SmartExtensions">
            <summary>
            The class contains extension methods for <see cref="T:System.Text.StringBuilder"/>, <see cref="T:System.IO.TextWriter"/> and <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartExtensions.AppendSmart(System.Text.StringBuilder,System.String,System.Object[])">
            <summary> Appends a formatted string, using the same semantics as Smart.Format. </summary>
            <param name="sb">The StringBuilder that will be used for output</param>
            <param name="format">The template that defines how the arguments are formatted</param>
            <param name="args">A list of arguments to be used in formatting</param>
        </member>
        <member name="M:SmartFormat.SmartExtensions.AppendLineSmart(System.Text.StringBuilder,System.String,System.Object[])">
            <summary> AppendLines a formatted string, using the same semantics as Smart.Format. </summary>
            <param name="sb">The StringBuilder that will be used for output</param>
            <param name="format">The template that defines how the arguments are formatted</param>
            <param name="args">A list of arguments to be used in formatting</param>
        </member>
        <member name="M:SmartFormat.SmartExtensions.WriteSmart(System.IO.TextWriter,System.String,System.Object[])">
            <summary> Writes out a formatted string, using the same semantics as Smart.Format. </summary>
            <param name="writer">The TextWriter that will be used for output</param>
            <param name="format">The template that defines how the arguments are formatted</param>
            <param name="args">A list of arguments to be used in formatting</param>
        </member>
        <member name="M:SmartFormat.SmartExtensions.WriteLineSmart(System.IO.TextWriter,System.String,System.Object[])">
            <summary> Writes out a formatted string, using the same semantics as Smart.Format. </summary>
            <param name="writer">The TextWriter that will be used for output</param>
            <param name="format">The template that defines how the arguments are formatted</param>
            <param name="args">A list of arguments to be used in formatting</param>
        </member>
        <member name="M:SmartFormat.SmartExtensions.FormatSmart(System.String,System.Object[])">
            <summary> Formats the specified arguments using this string as a template. </summary>
            <param name="format">The template that defines how the arguments are formatted</param>
            <param name="args">A list of arguments to be used in formatting</param>
        </member>
        <member name="T:SmartFormat.SmartFormatter">
            <summary>
            This class contains the Format method that constructs
            the composite string by invoking each extension.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.#ctor(SmartFormat.Core.Settings.SmartSettings)">
            <summary>
            Creates a new instance of a <see cref="T:SmartFormat.SmartFormatter"/>.
            </summary>
            <param name="settings">
            The <see cref="T:SmartFormat.Core.Settings.SmartSettings"/> to use, or <see langword="null"/> for default settings.
            Any changes after passing settings as a parameter may not have effect.
            </param>
        </member>
        <member name="E:SmartFormat.SmartFormatter.OnFormattingFailure">
            <summary>
            Event is raising, if an error occurs during evaluation of values or formats.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatError(SmartFormat.FormattingErrorEventArgs)">
            <summary>
            The methods gets called from <see cref="T:SmartFormat.Evaluator"/> to signal an error.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:SmartFormat.SmartFormatter.SourceExtensions">
            <summary>
            Gets the list of <see cref="T:SmartFormat.Core.Extensions.ISource" /> source extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.GetSourceExtensions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:SmartFormat.Core.Extensions.ISource" /> source extensions.
            </summary>
        </member>
        <member name="P:SmartFormat.SmartFormatter.FormatterExtensions">
            <summary>
            Gets the list of <see cref="T:SmartFormat.Core.Extensions.IFormatter" /> formatter extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.GetFormatterExtensions">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> of <see cref="T:SmartFormat.Core.Extensions.IFormatter" /> formatter extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.AddExtensions(SmartFormat.Core.Extensions.ISource[])">
            <summary>
            Adds <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions to the <see cref="M:SmartFormat.SmartFormatter.GetSourceExtensions"/> list of this formatter,
            if the <see cref="T:System.Type"/> has not been added before. <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Sources"/> are inserted
            at the recommended position, all others are added at the end of the list.
            <para>
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </para>
            <para>
            Extensions implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> <b>and</b> <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>
            will be auto-registered for both.
            </para>
            </summary>
            <param name="sourceExtensions"><see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions in an arbitrary order.</param>
            <returns>This <see cref="T:SmartFormat.SmartFormatter"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.AddExtensions(SmartFormat.Core.Extensions.IFormatter[])">
            <summary>
            Adds <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions to the <see cref="M:SmartFormat.SmartFormatter.GetFormatterExtensions"/> list of this formatter,
            if the <see cref="T:System.Type"/> has not been added before. <see cref="P:SmartFormat.Extensions.WellKnownExtensionTypes.Formatters"/> are inserted
            at the recommended position, all others are added at the end of the list.
            <para>
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </para>
            <para>
            Extensions implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> <b>and</b> <see cref="T:SmartFormat.Core.Extensions.IFormatter"/>
            will be auto-registered for both.
            </para>
            </summary>
            <param name="formatterExtensions"><see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions in an arbitrary order.</param>
            <returns>This <see cref="T:SmartFormat.SmartFormatter"/> instance.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.InsertExtension(System.Int32,SmartFormat.Core.Extensions.ISource)">
            <summary>
            Adds the <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions at the <paramref name="position"/> of the <see cref="M:SmartFormat.SmartFormatter.GetSourceExtensions"/> list of this formatter,
            if the <see cref="T:System.Type"/> has not been added before.
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </summary>
            <param name="position">The position in the <see cref="P:SmartFormat.SmartFormatter.SourceExtensions"/> list where new extensions will be added.</param>
            <param name="sourceExtension"></param>
            <returns>This <see cref="T:SmartFormat.SmartFormatter"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                   <paramref name="position" /> is less than 0.
                    -or-
                    <paramref name="position" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
            </exception>
        </member>
        <member name="M:SmartFormat.SmartFormatter.InsertExtension(System.Int32,SmartFormat.Core.Extensions.IFormatter)">
            <summary>
            Adds the <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions at the <paramref name="position"/> of the <see cref="M:SmartFormat.SmartFormatter.GetSourceExtensions"/> list of this formatter,
            if the <see cref="T:System.Type"/> has not been added before.
            If the extension implements <see cref="T:SmartFormat.Core.Extensions.IInitializer"/>, <see cref="M:SmartFormat.Core.Extensions.IInitializer.Initialize(SmartFormat.SmartFormatter)"/> will be invoked.
            </summary>
            <param name="position">The position in the <see cref="P:SmartFormat.SmartFormatter.SourceExtensions"/> list where new extensions will be added.</param>
            <param name="formatterExtension"></param>
            <returns>This <see cref="T:SmartFormat.SmartFormatter"/> instance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                   <paramref name="position" /> is less than 0.
                    -or-
                    <paramref name="position" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.
            </exception>
        </member>
        <member name="M:SmartFormat.SmartFormatter.GetSourceExtension``1">
            <summary>
            Searches for a Source Extension of the given type, and returns it.
            Returns <see langword="null"/> if the type cannot be found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The class implementing <see cref="T:SmartFormat.Core.Extensions.ISource"/> if found, else <see langword="null"/>.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.GetFormatterExtension``1">
            <summary>
            Searches for a Formatter Extension of the given type, and returns it.
            Returns <see langword="null"/> if the type cannot be found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The class implementing <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> if found, else <see langword="null"/>.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.RemoveSourceExtension``1">
            <summary>
            Removes Source Extension of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><see langword="true"/>, if the extension was found and could be removed.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.RemoveFormatterExtension``1">
            <summary>
            Removes the Formatter Extension of the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns><see langword="true"/>, if the extension was found and could be removed.</returns>
        </member>
        <member name="P:SmartFormat.SmartFormatter.Parser">
            <summary>
            Gets or set the instance of the <see cref="T:SmartFormat.Core.Parsing.Parser" />
            </summary>
        </member>
        <member name="P:SmartFormat.SmartFormatter.Settings">
            <summary>
            Get the <see cref="T:SmartFormat.Core.Settings.SmartSettings" /> for Smart.Format
            </summary>
        </member>
        <member name="P:SmartFormat.SmartFormatter.Registry">
            <summary>
            The <see cref="T:SmartFormat.Core.Extensions.Registry"/> is manages the extensions of the <see cref="T:SmartFormat.SmartFormatter"/>.
            </summary>
        </member>
        <member name="P:SmartFormat.SmartFormatter.Evaluator">
            <summary>
            The <see cref="T:SmartFormat.Evaluator"/> class evaluates <see cref="T:SmartFormat.Core.Parsing.Placeholder"/>s
            using <see cref="T:SmartFormat.Core.Extensions.ISource"/> extensions, and formats these values using <see cref="T:SmartFormat.Core.Extensions.IFormatter"/> extensions.
            </summary>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.String,System.Object[])">
            <summary>
            Replaces one or more format items in as specified string with the string representation of a specific object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Replaces one or more format items in as specified string with the string representation of a specific object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specific object.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider" /> to use.</param>
            <param name="format">A composite format string.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specific object.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider" /> to use.</param>
            <param name="format">A composite format string.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(SmartFormat.Core.Parsing.Format,System.Object[])">
            <summary>
            Replaces one or more format items in as specified string with the string representation of a specific object.
            </summary>
            <param name="formatParsed">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(SmartFormat.Core.Parsing.Format,System.Collections.Generic.IList{System.Object})">
            <summary>
            Replaces one or more format items in as specified string with the string representation of a specific object.
            </summary>
            <param name="formatParsed">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Object[])">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specific object.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider" /> to use.</param>
            <param name="formatParsed">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Collections.Generic.IList{System.Object})">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specific object.
            </summary>
            <param name="provider">The <see cref="T:System.IFormatProvider" /> to use.</param>
            <param name="formatParsed">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The object to format.</param>
            <returns>Returns the formatted input with items replaced with their string representation.</returns>
        </member>
        <member name="M:SmartFormat.SmartFormatter.Format(SmartFormat.Core.Formatting.FormattingInfo)">
            <summary>
            Format all items of the <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/> property of the <paramref name="formattingInfo"/>.
            </summary>
            <param name="formattingInfo">The <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/> must not be null.</param>
            <exception cref="T:System.ArgumentException">Throws if <see cref="P:SmartFormat.Core.Formatting.FormattingInfo.Format"/> is null.</exception>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatInto(SmartFormat.Core.Output.IOutput,System.String,System.Object[])">
            <summary>
            Writes the formatting result into an <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written to.</param>
            <param name="format">The format string.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatInto(SmartFormat.Core.Output.IOutput,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes the formatting result into an <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written to.</param>
            <param name="format">The format string.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatInto(SmartFormat.Core.Output.IOutput,System.IFormatProvider,System.String,System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes the formatting result into an <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written to.</param>
            <param name="provider"></param>
            <param name="format">The format string.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatInto(SmartFormat.Core.Output.IOutput,System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Object[])">
            <summary>
            Writes the formatting result into an <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written to.</param>
            <param name="provider"></param>
            <param name="format">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:SmartFormat.SmartFormatter.FormatInto(SmartFormat.Core.Output.IOutput,System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes the formatting result into an <see cref="T:SmartFormat.Core.Output.IOutput"/> instance.
            </summary>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> where the result is written to.</param>
            <param name="provider"></param>
            <param name="formatParsed">An instance of <see cref="T:SmartFormat.Core.Parsing.Format"/> that was returned by <see cref="M:SmartFormat.Core.Parsing.Parser.ParseFormat(System.String)"/>.</param>
            <param name="args">The objects to format.</param>
        </member>
        <member name="M:SmartFormat.SmartFormatter.ExecuteFormattingAction(SmartFormat.SmartFormatter,System.IFormatProvider,SmartFormat.Core.Parsing.Format,System.Collections.Generic.IList{System.Object},SmartFormat.Core.Output.IOutput,System.Action{SmartFormat.Core.Formatting.FormattingInfo})">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>
            and performs the <see paramref="doWork"/> action
            using the <see cref="T:SmartFormat.Core.Formatting.FormattingInfo"/>.
            </summary>
            <param name="formatter"></param>
            <param name="provider">The <see cref="T:System.IFormatProvider"/>, or null for using the default.</param>
            <param name="formatParsed"></param>
            <param name="args">
            The data argument. When it is a an <see cref="T:System.Collections.Generic.IList`1"/>, the first element will be used for <paramref name="doWork"/>.
            The list goes to <see cref="P:SmartFormat.Core.Formatting.FormatDetails.OriginalArgs"/>.
            </param>
            <param name="output">The <see cref="T:SmartFormat.Core.Output.IOutput"/> to use, or null using the default.</param>
            <param name="doWork">The <see cref="T:System.Action`1"/>to invoke.</param>
            <remarks>
            The method uses object pooling to reduce GC pressure,
            and assures that objects are returned to the pool after
            <see paramref="doWork"/> is done (or an exception is thrown).
            </remarks>
        </member>
        <member name="T:SmartFormat.Utilities.FormatDelegate">
            <summary>
            This class wraps a delegate, allowing it to be used as a parameter
            to any string-formatting method (such as <see cref="M:System.String.Format(System.String,System.Object)" />).
            For example:
            <code>
            var textWithLink = string.Format("Please click on {0:this link}.", new FormatDelegate((text) => Html.ActionLink(text, "SomeAction"));
            </code>
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.FormatDelegate.#ctor(System.Func{System.String,System.String})">
            <summary>
            Creates a new instance of a <see cref="T:SmartFormat.Utilities.FormatDelegate"/>.
            </summary>
            <param name="getFormat"></param>
        </member>
        <member name="M:SmartFormat.Utilities.FormatDelegate.#ctor(System.Func{System.String,System.IFormatProvider,System.String})">
            <summary>
            Creates a new instance of a <see cref="T:SmartFormat.Utilities.FormatDelegate"/>.
            </summary>
            <param name="getFormat"></param>
        </member>
        <member name="M:SmartFormat.Utilities.FormatDelegate.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Implements <see cref="T:System.IFormattable"/>.
            </summary>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="T:SmartFormat.Utilities.ILocalizationProvider">
            <summary>
            Provides the localized equivalent of an input string.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.ILocalizationProvider.GetString(System.String)">
            <summary>
            Gets the localized equivalent of the <paramref name="name"/> string.
            </summary>
            <param name="name">The string to be localized.</param>
            <returns>The localized equivalent of the <paramref name="name"/> string, or <see langref="null"/> if not found.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.ILocalizationProvider.GetString(System.String,System.String)">
            <summary>
            Gets the localized equivalent of the <paramref name="name"/> string.
            </summary>
            <param name="name">The string to be localized.</param>
            <param name="cultureName">The culture name to use for localization.</param>
            <returns>The localized equivalent of the <paramref name="name"/> string, or <see langref="null"/> if not found.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.ILocalizationProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized equivalent of the <paramref name="name"/> string.
            </summary>
            <param name="name">The string to be localized.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> to use for localization.</param>
            <returns>The localized equivalent of the <paramref name="name"/> string, or <see langref="null"/> if not found.</returns>
        </member>
        <member name="T:SmartFormat.Utilities.LocalizationProvider">
            <summary>
            The default <see cref="T:SmartFormat.Utilities.ILocalizationProvider"/> for string localization.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.#ctor(System.Boolean,System.Resources.ResourceManager[])">
            <summary>
            CTOR.
            </summary>
            <param name="isCaseSensitive"><see langword="true"/>, if finding resource names should be case-sensitive (default).</param>
            <param name="resources">Parameters of type <see cref="T:System.Resources.ResourceManager"/>.</param>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.AddResource(System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Adds a new resource, if it does exist.
            </summary>
            <param name="resourceManager"></param>
            <param name="isCaseSensitive"></param>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.Remove(System.String)">
            <summary>
            Removes a Resource.
            </summary>
            <param name="resourceBaseName"></param>
            <returns><see langword="true"/>, if the resource could be removed, else <see langword="false"/>.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.Clear">
            <summary>
            Remove all resources.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.GetString(System.String)">
            <summary>
            Gets the value from one of the registered resources.
            If no value was found, the <paramref name="name"/> is returned.
            </summary>
            <remarks>
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> is used, if no <see cref="T:System.Globalization.CultureInfo"/> is provided as a parameter.
            </remarks>
            <param name="name"></param>
            <returns>The value from one of the registered resources. If no value was found, the <paramref name="name"/> is returned.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.GetString(System.String,System.String)">
            <summary>
            Gets the value from one of the registered resources.
            If no value was found, the <paramref name="name"/> is returned.
            </summary>
            <param name="name"></param>
            <param name="cultureName"></param>
            <returns>The value from one of the registered resources. If no value was found, the <paramref name="name"/> is returned.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.LocalizationProvider.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the value from one of the registered string resources for the specified culture.
            If no value was found, the <paramref name="name"/> is returned.
            </summary>
            <remarks>
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> is used, if no <see cref="T:System.Globalization.CultureInfo"/> is provided as a parameter.
            </remarks>
            <param name="name"></param>
            <param name="cultureInfo"></param>
            <returns>The value from one of the registered string resources for the specified culture. If no value was found, the <paramref name="name"/> is returned.</returns>
        </member>
        <member name="P:SmartFormat.Utilities.LocalizationProvider.FallbackCulture">
            <summary>
            Gets or sets the fallback <see cref="T:System.Globalization.CultureInfo"/>, if the localized string cannot be found in the specified culture.
            </summary>
        </member>
        <member name="P:SmartFormat.Utilities.LocalizationProvider.ReturnNameIfNotFound">
            <summary>
            If <see langword="true"/>, the requested name will be returned, instead of null.
            </summary>
            <remarks>
            Same behavior as e.g. <c>Microsoft.Extensions.Localization.ResourceManagerStringLocalizer</c>, if <see langword="true"/>.
            </remarks>
        </member>
        <member name="T:SmartFormat.Utilities.PluralRules">
            <summary>
            Assigns the ISO language code to a pluralization rule.
            <see cref="T:SmartFormat.Utilities.PluralRules"/> are used by extensions like <c>TimeFormatter</c> and <c>PluralLocalizationFormatter</c>
            </summary>
        </member>
        <member name="P:SmartFormat.Utilities.PluralRules.IsoLangToDelegate">
            <summary>
            Holds the two-letter ISO language code as key, and the <see cref="T:SmartFormat.Utilities.PluralRules.PluralRuleDelegate"/> with the pluralization rule.
            <para/>
            Changing a value of this dictionary will change the pluralization rules globally. This is not recommended, but possible.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.PluralRules.RestoreDefault">
            <summary>
            Restores the default rules, e.g. after adding custom rules.
            </summary>
        </member>
        <member name="T:SmartFormat.Utilities.PluralRules.PluralRuleDelegate">
            <summary>
            This delegate determines which singular or plural word should be chosen for the given quantity.
            This allows each language to define its own behavior for singular or plural words.
            </summary>
            <param name="value">The value that is being referenced by the singular or plural words</param>
            <param name="pluralWordsCount">The number of plural words</param>
            <returns>Returns the index of the parameter to be used for pluralization.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.PluralRules.GetPluralRule(System.String)">
            <summary>Construct a rule set for the language code.</summary>
            <param name="twoLetterIsoLanguageName">The language code in two-letter ISO-639 format.</param>
            <remarks>
            The pluralization rules are taken from
            http://www.unicode.org/cldr/cldr-aux/charts/22/supplemental/language_plural_rules.html
            </remarks>
        </member>
        <member name="M:SmartFormat.Utilities.PluralRules.BetweenWithoutFraction(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Returns <see langword="true"/> if the value is inclusively between the min and max and has no fraction.
            </summary>
        </member>
        <member name="T:SmartFormat.Utilities.SystemTime">
            <summary>
            Used for getting DateTime.Now or DateOffset.Now.
            Mainly used for unit tests.
            </summary>
        </member>
        <member name="P:SmartFormat.Utilities.SystemTime.Now">
            <summary>
            Normally this is a pass-through to DateTime.Now, but it can be overridden with SetDateTime( .. ) for unit testing and debugging.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.SystemTime.SetDateTime(System.DateTime)">
            <summary>
            Set time to return when SystemTime.Now() is called.
            </summary>
        </member>
        <member name="P:SmartFormat.Utilities.SystemTime.OffsetNow">
            <summary>
            Normally this is a pass-through to DateTimeOffset.Now, but it can be overridden with SetDateTime( .. ) for unit testing and debugging.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.SystemTime.SetDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Set time to return when SystemTime.OffsetNow() is called.
            </summary>
        </member>
        <member name="M:SmartFormat.Utilities.SystemTime.ResetDateTime">
            <summary>
            Resets SystemTime.Now() to return DateTime.Now.
            </summary>
        </member>
        <member name="T:SmartFormat.Utilities.TupleExtensions">
            <summary>
            Extensions for <see cref="T:System.ValueTuple"/>s.
            </summary>
            <remarks>
            Credits to James Esh for the code posted on
            https://stackoverflow.com/questions/46707556/detect-if-an-object-is-a-valuetuple
            </remarks>
        </member>
        <member name="M:SmartFormat.Utilities.TupleExtensions.IsValueTuple(System.Object)">
            <summary>
            Extension method to check whether an object is of type <see cref="T:System.ValueTuple"/>
            </summary>
            <param name="obj"></param>
            <returns>Returns <c>true</c>, if the object is of type <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.TupleExtensions.IsValueTupleType(System.Type)">
            <summary>
            Extension method to check whether the given type is a <see cref="T:System.ValueTuple"/>
            </summary>
            <param name="type"></param>
            <returns>Returns <c>true</c>, if the type is a <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.TupleExtensions.GetValueTupleItemObjects(System.Object)">
            <summary>
            A list of <see cref="T:System.Object"/>s with the values for each <see cref="T:System.ValueTuple"/> field.
            </summary>
            <param name="tuple"></param>
            <returns>Returns a list of <see cref="T:System.Object"/>s with the values for each <see cref="T:System.ValueTuple"/> field.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.TupleExtensions.GetValueTupleItemFields(System.Type)">
            <summary>
            A list of <see cref="T:System.Reflection.FieldInfo"/>s with the fields of a <see cref="T:System.ValueTuple"/>.
            </summary>
            <param name="tupleType"></param>
            <returns>Returns of list of <see cref="T:System.Reflection.FieldInfo"/>s with the fields of a <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:SmartFormat.Utilities.TupleExtensions.GetValueTupleItemObjectsFlattened(System.Object)">
            <summary>
            Gets all <see cref="T:System.Object"/>s of a <see cref="T:System.ValueTuple"/> as a flattened list of objects.
            </summary>
            <param name="tuple"></param>
            <returns>All <see cref="T:System.Object"/>s of a <see cref="T:System.ValueTuple"/> as a flattened list of objects.</returns>
        </member>
        <member name="T:SmartFormat.ZString.ZCharArray">
            <summary>
            A lightweight container that rents a char array as a buffer from an <see cref="T:System.Buffers.ArrayPool`1"/> and returns it when disposed.
            It simplifies passing around the buffer without intermediate memory allocations.
            <para/>
            Note that failing to dispose this struct after use will result in a memory leak.
            </summary>
        </member>
        <member name="F:SmartFormat.ZString.ZCharArray.DefaultBufferCapacity">
            <summary>
            The default capacity of the array.
            </summary>
        </member>
        <member name="F:SmartFormat.ZString.ZCharArray.MaxBufferCapacity">
            <summary>
            The maximum capacity of the array.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.#ctor">
            <summary>
            Creates a new <see cref="T:SmartFormat.ZString.ZCharArray"/> with a length of <see cref="F:SmartFormat.ZString.ZCharArray.DefaultBufferCapacity"/>>.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SmartFormat.ZString.ZCharArray"/> with the specified length.
            </summary>
            <param name="length">The length of the array.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.GetSpan">
            <summary>
            Gets the <see cref="T:System.ReadOnlySpan`1"/> of the array.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> of the array.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:SmartFormat.ZString.ZCharArray.Span">
            <summary>
            Gets the <see cref="T:System.Span`1"/> of the array.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:SmartFormat.ZString.ZCharArray.Length">
            <summary>
            Gets the length of the array.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:SmartFormat.ZString.ZCharArray.Capacity">
            <summary>
            Gets the capacity of the array.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Reset">
            <summary>
            Sets the current length of the array to zero.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Grow(System.Int32)">
            <summary>
            Grows the array to the specified length,
            copying the existing elements if necessary.
            </summary>
            <param name="length">The new length of the array.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.Span{System.Char})">
            <summary>
            Writes the specified data to the array. Resizes the array if necessary.
            </summary>
            <param name="data">The data to write.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes the specified data to the array. Resizes the array if necessary.
            </summary>
            <param name="data">The data to write.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.String)">
            <summary>
            Writes the specified data to the array. Resizes the array if necessary.
            </summary>
            <param name="data">The data to write.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.Char)">
            <summary>
            Writes the specified char to the array. Resizes the array if necessary.
            </summary>
            <param name="c">The char to write.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.Char,System.Int32)">
            <summary>
            Writes the specified character to the array a specified number of times.
            </summary>
            <param name="c">The char to write.</param>
            <param name="count">The number of repetitions.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Write(System.IFormattable,System.String,System.IFormatProvider)">
            <summary>
            Writes the <see cref="T:System.IFormattable"/> data to the array.
            For more information, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>.
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:SmartFormat.ZString.ZCharArray.IsDisposed">
            <summary>
            Returns <see langword="true"/> if the array has been disposed.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.ToString">
            <summary>
            Returns the string representation of the array.
            </summary>
            <returns>The string representation of the array.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:SmartFormat.ZString.ZCharArray.Dispose">
            <summary>
            Disposes the array, returning it to the <see cref="T:System.Buffers.ArrayPool`1"/>.
            </summary>
        </member>
        <member name="T:SmartFormat.ZString.ZStringBuilder">
            <summary>
            A 1:1 wrapper around <see cref="T:Cysharp.Text.Utf16ValueStringBuilder"/>,
            so that we don't have to reference <see cref="N:Cysharp.Text"/> classes directly.
            </summary>
            <remarks>
            We cannot add/get <see cref="T:SmartFormat.ZString.ZStringBuilder"/> into/from a list or stack,
            because it contains a value type <see langword="struct"/> <see cref="T:Cysharp.Text.Utf16ValueStringBuilder"/>.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="disposeImmediately">
            If true uses thread-static buffer that is faster but must return immediately.
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:SmartFormat.ZString.ZStringBuilder.Length">
            <summary>Length of written buffer.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AsSpan">
            <summary>Get the written buffer data.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AsMemory">
            <summary>Get the written buffer data.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AsArraySegment">
            <summary>Get the written buffer data.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Dispose">
            <summary>
            Return the inner buffer to pool.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Clear">
            <summary>Clears the buffer.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.TryGrow(System.Int32)">
            <summary>
            Tries to grow the buffer to the specified capacity.
            </summary>
            <param name="sizeHint"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Grow(System.Int32)">
            <summary>
            Grows the buffer to the specified capacity.
            </summary>
            <param name="sizeHint"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine">
            <summary>Appends the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Char)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.String)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.ReadOnlySpan{System.Char})">
            <summary>Appends a contiguous region of arbitrary memory followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine``1(``0)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Byte)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Byte,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.DateTime)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.DateTime,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.DateTimeOffset)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.DateTimeOffset,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Decimal)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Decimal,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Double)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Double,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int16)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int16,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int32)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int32,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int64)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Int64,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.SByte)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.SByte,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Single)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Single,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.TimeSpan)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.TimeSpan,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt16)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt16,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt32)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt32,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt64)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.UInt64,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Guid)">
            <summary>Appends the string representation of a specified value followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendLine(System.Guid,System.String)">
            <summary>Appends the string representation of a specified value with numeric format strings followed by the default line terminator to the end of this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Char)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Char,System.Int32)">
            <summary>
            Appends a specified number of copies of the string representation of a specified value to this instance.
            </summary>
            <param name="value"></param>
            <param name="repeatCount"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.String)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.ReadOnlySpan{System.Char})">
            <summary>Appends a contiguous region of arbitrary memory to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append``1(``0)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(SmartFormat.ZString.ZStringBuilder)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Byte)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Byte,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.DateTime)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.DateTime,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.DateTimeOffset)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.DateTimeOffset,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Decimal)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Decimal,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Double)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Double,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int16)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int16,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int32)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int32,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int64)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Int64,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.SByte)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.SByte,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Single)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Single,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.TimeSpan)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.TimeSpan,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt16)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt16,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt32)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt32,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt64)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.UInt64,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Guid)">
            <summary>Appends the string representation of a specified value to this instance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Append(System.Guid,System.String)">
            <summary>Appends the string representation of a specified value to this instance with numeric format strings.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Insert(System.Int32,System.String,System.Int32)">
            <summary>
            Inserts a string 0 or more times into this builder at the specified position.
            </summary>
            <param name="index">The index to insert in this builder.</param>
            <param name="value">The string to insert.</param>
            <param name="count">The number of times to insert the string.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string into this builder at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Inserts a contiguous region of arbitrary memory 0 or more times into this builder at the specified position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <param name="count"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.Char,System.Char)">
            <summary>
            Replaces all instances of one character with another in this builder.
            </summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character to replace <paramref name="oldChar"/> with.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary>
            Replaces all instances of one character with another in this builder.
            </summary>
            <param name="oldChar">The character to replace.</param>
            <param name="newChar">The character to replace <paramref name="oldChar"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.String,System.String)">
            <summary>
            Replaces all instances of one string with another in this builder.
            </summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string to replace <paramref name="oldValue"/> with.</param>
            <remarks>
            If <paramref name="newValue"/> is <c>null</c>, instances of <paramref name="oldValue"/>
            are removed from this builder.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Replaces all occurrences of one <see cref="T:System.ReadOnlySpan`1"/>  with another <see cref="T:System.ReadOnlySpan`1"/> in this builder.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Replaces all instances of one string with another in part of this builder.
            </summary>
            <param name="oldValue">The string to replace.</param>
            <param name="newValue">The string to replace <paramref name="oldValue"/> with.</param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
            <remarks>
            If <paramref name="newValue"/> is <c>null</c>, instances of <paramref name="oldValue"/>
            are removed from this builder.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Replace(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32,System.Int32)">
            <summary>
            Replaces all occurrences of one <see cref="T:System.ReadOnlySpan`1"/> with another <see cref="T:System.ReadOnlySpan`1"/> in part of this builder.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="startIndex">The index to start in this builder.</param>
            <param name="count">The number of characters to read in this builder.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.ReplaceAt(System.Char,System.Int32)">
            <summary>
            Replaces the contents of a single position within the builder.
            </summary>
            <param name="newChar">The character to use at the position.</param>
            <param name="replaceIndex">The index to replace.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Remove(System.Int32,System.Int32)">
            <summary>
            Removes a range of characters from this builder.
            </summary>
            <remarks>
            This method does not reduce the capacity of this builder.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.TryCopyTo(System.Span{System.Char},System.Int32@)">
            <summary>Copy inner buffer to the destination span.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a system.String.
            </summary>
            <remarks>
            <see cref="T:Cysharp.Text.Utf16ValueStringBuilder"/> creates the string from the buffer.
            Using <i>string.Create</i> here does not bring better results.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.GetMemory(System.Int32)">
            <summary>IBufferWriter.GetMemory.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.GetSpan(System.Int32)">
            <summary>IBufferWriter.GetSpan.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.Advance(System.Int32)">
            <summary>IBufferWriter.Advance.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``1(System.ReadOnlySpan{System.Char},``0)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``2(System.ReadOnlySpan{System.Char},``0,``1)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``3(System.ReadOnlySpan{System.Char},``0,``1,``2)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``4(System.ReadOnlySpan{System.Char},``0,``1,``2,``3)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``5(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``6(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``7(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``8(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``9(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``10(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``11(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``12(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``13(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``14(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``15(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``16(System.ReadOnlySpan{System.Char},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``1(System.String,``0)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``2(System.String,``0,``1)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``3(System.String,``0,``1,``2)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``4(System.String,``0,``1,``2,``3)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``5(System.String,``0,``1,``2,``3,``4)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``9(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``10(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``11(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``12(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``13(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``14(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``15(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendFormat``16(System.String,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>Appends the string returned by processing a composite format string, each format item is replaced by the string representation of arguments.</summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,``0[])">
            <summary>
            Concatenates the string representations of the elements in the provided array of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.List{``0})">
            <summary>
            Concatenates the string representations of the elements in the provided list of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.ReadOnlySpan{``0})">
            <summary>
            Concatenates the provided span of objects, using the specified char separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IEnumerable`1"/>>, using the specified char separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.ICollection{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.ICollection`1"/>, using the specified char separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IList{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IList`1"/>, using the specified char separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>, using the specified char separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, using the specified char separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,``0[])">
            <summary>
            Concatenates the string representations of the elements in the provided array of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.List{``0})">
            <summary>
            Concatenates the string representations of the elements in the provided list of objects, using the specified separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.ReadOnlySpan{``0})">
            <summary>
            Concatenates the provided <see cref="T:System.ReadOnlySpan`1"/>>, using the specified separator between each member, then appends the result to the current instance of the string builder.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates and appends the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.ICollection`1"/>>, using the specified separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IList`1"/>, using the specified separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>, using the specified separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Concatenates and appends the members of a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, using the specified separator between each member.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
        </member>
        <member name="T:SmartFormat.ZString.ZStringBuilderUtilities">
            <summary>
            Extensions to <see cref="T:SmartFormat.ZString.ZStringBuilder"/>.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilderUtilities.CalcCapacity(SmartFormat.Core.Parsing.Format)">
            <summary>
            Calculates the estimated output string capacity for a <see cref="T:SmartFormat.Core.Parsing.Format"/>.
            </summary>
            <param name="format"></param>
            <returns>The estimated output string capacity for a <see cref="T:SmartFormat.Core.Parsing.Format"/>.</returns>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilderUtilities.CreateZStringBuilder">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.ZString.ZStringBuilder"/> with the given initial capacity.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilderUtilities.CreateZStringBuilder(SmartFormat.Core.Parsing.Format)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.ZString.ZStringBuilder"/> with the given initial capacity.
            </summary>
            <param name="format">The estimated buffer capacity will be calculated from the <see cref="T:SmartFormat.Core.Parsing.Format"/> instance.</param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringBuilderUtilities.CreateZStringBuilder(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:SmartFormat.ZString.ZStringBuilder"/> with the given initial capacity.
            </summary>
            <param name="capacity">The estimated capacity required. This will reduce or avoid incremental buffer increases.</param>
        </member>
        <member name="T:SmartFormat.ZString.ZStringWriter">
            <summary>
            A 1:1 wrapper around <see cref="T:Cysharp.Text.ZStringWriter"/>,
            so that we don't have to reference <see cref="N:Cysharp.Text"/> classes directly.
            </summary>
            <remarks>
            It's important to make sure the writer is always properly disposed.
            </remarks>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.#ctor">
            <summary>
            Creates a new instance using <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> as format provider.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.#ctor(System.IFormatProvider)">
            <summary>
            Creates a new instance with given format provider.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Close">
            <summary>
            Disposes this instance, operations are no longer allowed.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:SmartFormat.ZString.ZStringWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.Decimal)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteLineAsync(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteLineAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.FlushAsync">
            <summary>
            No-op.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.ToString">
            <summary>
            Materializes the current state from underlying string builder.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a span of characters.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
            <summary>
            Writes a span of characters followed by a line terminator.
            /// </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes a span of characters.
            </summary>
        </member>
        <member name="M:SmartFormat.ZString.ZStringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <summary>
            Writes a span of characters followed by a line terminator.
            </summary>
            <param name="buffer"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
    </members>
</doc>
